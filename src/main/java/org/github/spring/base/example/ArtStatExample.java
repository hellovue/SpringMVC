//*****************************************************************************
// The file is automatically generated by the program, do not manually modify. 
//*****************************************************************************

package org.github.spring.base.example;

import java.util.ArrayList;
import java.util.List;

public class ArtStatExample {
  protected String orderByClause;

  protected boolean distinct;

  protected List<Criteria> oredCriteria;

  public ArtStatExample() {
    oredCriteria = new ArrayList<Criteria>();
  }

  public void setOrderByClause(String orderByClause) {
    this.orderByClause = orderByClause;
  }

  public String getOrderByClause() {
    return orderByClause;
  }

  public void setDistinct(boolean distinct) {
    this.distinct = distinct;
  }

  public boolean isDistinct() {
    return distinct;
  }

  public List<Criteria> getOredCriteria() {
    return oredCriteria;
  }

  public void or(Criteria criteria) {
    oredCriteria.add(criteria);
  }

  public Criteria or() {
    Criteria criteria = createCriteriaInternal();
    oredCriteria.add(criteria);
    return criteria;
  }

  public Criteria createCriteria() {
    Criteria criteria = createCriteriaInternal();
    if (oredCriteria.size() == 0) {
      oredCriteria.add(criteria);
    }
    return criteria;
  }

  protected Criteria createCriteriaInternal() {
    Criteria criteria = new Criteria(this);
    return criteria;
  }

  public void clear() {
    oredCriteria.clear();
    orderByClause = null;
    distinct = false;
  }

  protected abstract static class GeneratedCriteria {
    protected List<Criterion> criteria;

    protected GeneratedCriteria() {
      super();
      criteria = new ArrayList<Criterion>();
    }

    public boolean isValid() {
      return criteria.size() > 0;
    }

    public List<Criterion> getAllCriteria() {
      return criteria;
    }

    public List<Criterion> getCriteria() {
      return criteria;
    }

    protected void addCriterion(String condition) {
      if (condition == null) {
        throw new RuntimeException("Value for condition cannot be null");
      }
      criteria.add(new Criterion(condition));
    }

    protected void addCriterion(String condition, Object value, String property) {
      if (value == null) {
        throw new RuntimeException("Value for " + property + " cannot be null");
      }
      criteria.add(new Criterion(condition, value));
    }

    protected void addCriterion(String condition, Object value1, Object value2, String property) {
      if (value1 == null || value2 == null) {
        throw new RuntimeException("Between values for " + property + " cannot be null");
      }
      criteria.add(new Criterion(condition, value1, value2));
    }

    public Criteria andTidIsNull() {
      addCriterion("tid is null");
      return (Criteria) this;
    }

    public Criteria andTidIsNotNull() {
      addCriterion("tid is not null");
      return (Criteria) this;
    }

    public Criteria andTidEqualTo(String value) {
      if(value != null) addCriterion("tid =", value, "tid");
      return (Criteria) this;
    }

    public Criteria andTidNotEqualTo(String value) {
      if(value != null) addCriterion("tid <>", value, "tid");
      return (Criteria) this;
    }

    public Criteria andTidGreaterThan(String value) {
      if(value != null) addCriterion("tid >", value, "tid");
      return (Criteria) this;
    }

    public Criteria andTidGreaterThanOrEqualTo(String value) {
      if(value != null) addCriterion("tid >=", value, "tid");
      return (Criteria) this;
    }

    public Criteria andTidLessThan(String value) {
      if(value != null) addCriterion("tid <", value, "tid");
      return (Criteria) this;
    }

    public Criteria andTidLessThanOrEqualTo(String value) {
      if(value != null) addCriterion("tid <=", value, "tid");
      return (Criteria) this;
    }

    public Criteria andTidLike(String value) {
      if(value != null) addCriterion("tid like", value, "tid");
      return (Criteria) this;
    }

    public Criteria andTidNotLike(String value) {
      if(value != null) addCriterion("tid not like", value, "tid");
      return (Criteria) this;
    }

    public Criteria andTidIn(List<String> values) {
      if (values != null && ! values.isEmpty()) addCriterion("tid in", values, "tid");
      return (Criteria) this;
    }

    public Criteria andTidNotIn(List<String> values) {
      if (values != null && ! values.isEmpty()) addCriterion("tid not in", values, "tid");
      return (Criteria) this;
    }

    public Criteria andTidBetween(String head, String tail) {
      if(head != null && tail != null) addCriterion("tid between", head, tail, "tid");
      return (Criteria) this;
    }

    public Criteria andTidNotBetween(String head, String tail) {
      if(head != null && tail != null) addCriterion("tid not between", head, tail, "tid");
      return (Criteria) this;
    }

    public Criteria andReadCountIsNull() {
      addCriterion("read_count is null");
      return (Criteria) this;
    }

    public Criteria andReadCountIsNotNull() {
      addCriterion("read_count is not null");
      return (Criteria) this;
    }

    public Criteria andReadCountEqualTo(Integer value) {
      if(value != null) addCriterion("read_count =", value, "readCount");
      return (Criteria) this;
    }

    public Criteria andReadCountNotEqualTo(Integer value) {
      if(value != null) addCriterion("read_count <>", value, "readCount");
      return (Criteria) this;
    }

    public Criteria andReadCountGreaterThan(Integer value) {
      if(value != null) addCriterion("read_count >", value, "readCount");
      return (Criteria) this;
    }

    public Criteria andReadCountGreaterThanOrEqualTo(Integer value) {
      if(value != null) addCriterion("read_count >=", value, "readCount");
      return (Criteria) this;
    }

    public Criteria andReadCountLessThan(Integer value) {
      if(value != null) addCriterion("read_count <", value, "readCount");
      return (Criteria) this;
    }

    public Criteria andReadCountLessThanOrEqualTo(Integer value) {
      if(value != null) addCriterion("read_count <=", value, "readCount");
      return (Criteria) this;
    }

    public Criteria andReadCountIn(List<Integer> values) {
      if (values != null && ! values.isEmpty()) addCriterion("read_count in", values, "readCount");
      return (Criteria) this;
    }

    public Criteria andReadCountNotIn(List<Integer> values) {
      if (values != null && ! values.isEmpty()) addCriterion("read_count not in", values, "readCount");
      return (Criteria) this;
    }

    public Criteria andReadCountBetween(Integer head, Integer tail) {
      if(head != null && tail != null) addCriterion("read_count between", head, tail, "readCount");
      return (Criteria) this;
    }

    public Criteria andReadCountNotBetween(Integer head, Integer tail) {
      if(head != null && tail != null) addCriterion("read_count not between", head, tail, "readCount");
      return (Criteria) this;
    }

    public Criteria andUpvoteIsNull() {
      addCriterion("upvote is null");
      return (Criteria) this;
    }

    public Criteria andUpvoteIsNotNull() {
      addCriterion("upvote is not null");
      return (Criteria) this;
    }

    public Criteria andUpvoteEqualTo(Integer value) {
      if(value != null) addCriterion("upvote =", value, "upvote");
      return (Criteria) this;
    }

    public Criteria andUpvoteNotEqualTo(Integer value) {
      if(value != null) addCriterion("upvote <>", value, "upvote");
      return (Criteria) this;
    }

    public Criteria andUpvoteGreaterThan(Integer value) {
      if(value != null) addCriterion("upvote >", value, "upvote");
      return (Criteria) this;
    }

    public Criteria andUpvoteGreaterThanOrEqualTo(Integer value) {
      if(value != null) addCriterion("upvote >=", value, "upvote");
      return (Criteria) this;
    }

    public Criteria andUpvoteLessThan(Integer value) {
      if(value != null) addCriterion("upvote <", value, "upvote");
      return (Criteria) this;
    }

    public Criteria andUpvoteLessThanOrEqualTo(Integer value) {
      if(value != null) addCriterion("upvote <=", value, "upvote");
      return (Criteria) this;
    }

    public Criteria andUpvoteIn(List<Integer> values) {
      if (values != null && ! values.isEmpty()) addCriterion("upvote in", values, "upvote");
      return (Criteria) this;
    }

    public Criteria andUpvoteNotIn(List<Integer> values) {
      if (values != null && ! values.isEmpty()) addCriterion("upvote not in", values, "upvote");
      return (Criteria) this;
    }

    public Criteria andUpvoteBetween(Integer head, Integer tail) {
      if(head != null && tail != null) addCriterion("upvote between", head, tail, "upvote");
      return (Criteria) this;
    }

    public Criteria andUpvoteNotBetween(Integer head, Integer tail) {
      if(head != null && tail != null) addCriterion("upvote not between", head, tail, "upvote");
      return (Criteria) this;
    }
  }

  public static class Criteria extends GeneratedCriteria {
    private ArtStatExample example;

    protected Criteria(ArtStatExample example) {
      super();
      this.example = example;
    }

    public ArtStatExample example() {
      return this.example;
    }
  }

  public static class Criterion {
    private String condition;

    private Object value;

    private Object secondValue;

    private boolean noValue;

    private boolean singleValue;

    private boolean betweenValue;

    private boolean listValue;

    private String typeHandler;

    public String getCondition() {
      return condition;
    }

    public Object getValue() {
      return value;
    }

    public Object getSecondValue() {
      return secondValue;
    }

    public boolean isNoValue() {
      return noValue;
    }

    public boolean isSingleValue() {
      return singleValue;
    }

    public boolean isBetweenValue() {
      return betweenValue;
    }

    public boolean isListValue() {
      return listValue;
    }

    public String getTypeHandler() {
      return typeHandler;
    }

    protected Criterion(String condition) {
      super();
      this.condition = condition;
      this.typeHandler = null;
      this.noValue = true;
    }

    protected Criterion(String condition, Object value, String typeHandler) {
      super();
      this.condition = condition;
      this.value = value;
      this.typeHandler = typeHandler;
      if (value instanceof List<?>) {
        this.listValue = true;
      } else {
        this.singleValue = true;
      }
    }

    protected Criterion(String condition, Object value) {
      this(condition, value, null);
    }

    protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
      super();
      this.condition = condition;
      this.value = value;
      this.secondValue = secondValue;
      this.typeHandler = typeHandler;
      this.betweenValue = true;
    }

    protected Criterion(String condition, Object value, Object secondValue) {
      this(condition, value, secondValue, null);
    }
  }
}