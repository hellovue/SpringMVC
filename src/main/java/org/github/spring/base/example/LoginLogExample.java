//*****************************************************************************
// The file is automatically generated by the program, do not manually modify. 
//*****************************************************************************

package org.github.spring.base.example;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class LoginLogExample {
  protected String orderByClause;

  protected boolean distinct;

  protected List<Criteria> oredCriteria;

  public LoginLogExample() {
    oredCriteria = new ArrayList<Criteria>();
  }

  public void setOrderByClause(String orderByClause) {
    this.orderByClause = orderByClause;
  }

  public String getOrderByClause() {
    return orderByClause;
  }

  public void setDistinct(boolean distinct) {
    this.distinct = distinct;
  }

  public boolean isDistinct() {
    return distinct;
  }

  public List<Criteria> getOredCriteria() {
    return oredCriteria;
  }

  public void or(Criteria criteria) {
    oredCriteria.add(criteria);
  }

  public Criteria or() {
    Criteria criteria = createCriteriaInternal();
    oredCriteria.add(criteria);
    return criteria;
  }

  public Criteria createCriteria() {
    Criteria criteria = createCriteriaInternal();
    if (oredCriteria.size() == 0) {
      oredCriteria.add(criteria);
    }
    return criteria;
  }

  protected Criteria createCriteriaInternal() {
    Criteria criteria = new Criteria(this);
    return criteria;
  }

  public void clear() {
    oredCriteria.clear();
    orderByClause = null;
    distinct = false;
  }

  protected abstract static class GeneratedCriteria {
    protected List<Criterion> criteria;

    protected GeneratedCriteria() {
      super();
      criteria = new ArrayList<Criterion>();
    }

    public boolean isValid() {
      return criteria.size() > 0;
    }

    public List<Criterion> getAllCriteria() {
      return criteria;
    }

    public List<Criterion> getCriteria() {
      return criteria;
    }

    protected void addCriterion(String condition) {
      if (condition == null) {
        throw new RuntimeException("Value for condition cannot be null");
      }
      criteria.add(new Criterion(condition));
    }

    protected void addCriterion(String condition, Object value, String property) {
      if (value == null) {
        throw new RuntimeException("Value for " + property + " cannot be null");
      }
      criteria.add(new Criterion(condition, value));
    }

    protected void addCriterion(String condition, Object value1, Object value2, String property) {
      if (value1 == null || value2 == null) {
        throw new RuntimeException("Between values for " + property + " cannot be null");
      }
      criteria.add(new Criterion(condition, value1, value2));
    }

    public Criteria andLoginLogIdIsNull() {
      addCriterion("login_log_id is null");
      return (Criteria) this;
    }

    public Criteria andLoginLogIdIsNotNull() {
      addCriterion("login_log_id is not null");
      return (Criteria) this;
    }

    public Criteria andLoginLogIdEqualTo(Integer value) {
      if(value != null) addCriterion("login_log_id =", value, "loginLogId");
      return (Criteria) this;
    }

    public Criteria andLoginLogIdNotEqualTo(Integer value) {
      if(value != null) addCriterion("login_log_id <>", value, "loginLogId");
      return (Criteria) this;
    }

    public Criteria andLoginLogIdGreaterThan(Integer value) {
      if(value != null) addCriterion("login_log_id >", value, "loginLogId");
      return (Criteria) this;
    }

    public Criteria andLoginLogIdGreaterThanOrEqualTo(Integer value) {
      if(value != null) addCriterion("login_log_id >=", value, "loginLogId");
      return (Criteria) this;
    }

    public Criteria andLoginLogIdLessThan(Integer value) {
      if(value != null) addCriterion("login_log_id <", value, "loginLogId");
      return (Criteria) this;
    }

    public Criteria andLoginLogIdLessThanOrEqualTo(Integer value) {
      if(value != null) addCriterion("login_log_id <=", value, "loginLogId");
      return (Criteria) this;
    }

    public Criteria andLoginLogIdIn(List<Integer> values) {
      if (values != null && ! values.isEmpty()) addCriterion("login_log_id in", values, "loginLogId");
      return (Criteria) this;
    }

    public Criteria andLoginLogIdNotIn(List<Integer> values) {
      if (values != null && ! values.isEmpty()) addCriterion("login_log_id not in", values, "loginLogId");
      return (Criteria) this;
    }

    public Criteria andLoginLogIdBetween(Integer head, Integer tail) {
      if(head != null && tail != null) addCriterion("login_log_id between", head, tail, "loginLogId");
      return (Criteria) this;
    }

    public Criteria andLoginLogIdNotBetween(Integer head, Integer tail) {
      if(head != null && tail != null) addCriterion("login_log_id not between", head, tail, "loginLogId");
      return (Criteria) this;
    }

    public Criteria andUserIdIsNull() {
      addCriterion("user_id is null");
      return (Criteria) this;
    }

    public Criteria andUserIdIsNotNull() {
      addCriterion("user_id is not null");
      return (Criteria) this;
    }

    public Criteria andUserIdEqualTo(Integer value) {
      if(value != null) addCriterion("user_id =", value, "userId");
      return (Criteria) this;
    }

    public Criteria andUserIdNotEqualTo(Integer value) {
      if(value != null) addCriterion("user_id <>", value, "userId");
      return (Criteria) this;
    }

    public Criteria andUserIdGreaterThan(Integer value) {
      if(value != null) addCriterion("user_id >", value, "userId");
      return (Criteria) this;
    }

    public Criteria andUserIdGreaterThanOrEqualTo(Integer value) {
      if(value != null) addCriterion("user_id >=", value, "userId");
      return (Criteria) this;
    }

    public Criteria andUserIdLessThan(Integer value) {
      if(value != null) addCriterion("user_id <", value, "userId");
      return (Criteria) this;
    }

    public Criteria andUserIdLessThanOrEqualTo(Integer value) {
      if(value != null) addCriterion("user_id <=", value, "userId");
      return (Criteria) this;
    }

    public Criteria andUserIdIn(List<Integer> values) {
      if (values != null && ! values.isEmpty()) addCriterion("user_id in", values, "userId");
      return (Criteria) this;
    }

    public Criteria andUserIdNotIn(List<Integer> values) {
      if (values != null && ! values.isEmpty()) addCriterion("user_id not in", values, "userId");
      return (Criteria) this;
    }

    public Criteria andUserIdBetween(Integer head, Integer tail) {
      if(head != null && tail != null) addCriterion("user_id between", head, tail, "userId");
      return (Criteria) this;
    }

    public Criteria andUserIdNotBetween(Integer head, Integer tail) {
      if(head != null && tail != null) addCriterion("user_id not between", head, tail, "userId");
      return (Criteria) this;
    }

    public Criteria andIpIsNull() {
      addCriterion("ip is null");
      return (Criteria) this;
    }

    public Criteria andIpIsNotNull() {
      addCriterion("ip is not null");
      return (Criteria) this;
    }

    public Criteria andIpEqualTo(String value) {
      if(value != null) addCriterion("ip =", value, "ip");
      return (Criteria) this;
    }

    public Criteria andIpNotEqualTo(String value) {
      if(value != null) addCriterion("ip <>", value, "ip");
      return (Criteria) this;
    }

    public Criteria andIpGreaterThan(String value) {
      if(value != null) addCriterion("ip >", value, "ip");
      return (Criteria) this;
    }

    public Criteria andIpGreaterThanOrEqualTo(String value) {
      if(value != null) addCriterion("ip >=", value, "ip");
      return (Criteria) this;
    }

    public Criteria andIpLessThan(String value) {
      if(value != null) addCriterion("ip <", value, "ip");
      return (Criteria) this;
    }

    public Criteria andIpLessThanOrEqualTo(String value) {
      if(value != null) addCriterion("ip <=", value, "ip");
      return (Criteria) this;
    }

    public Criteria andIpLike(String value) {
      if(value != null) addCriterion("ip like", value, "ip");
      return (Criteria) this;
    }

    public Criteria andIpNotLike(String value) {
      if(value != null) addCriterion("ip not like", value, "ip");
      return (Criteria) this;
    }

    public Criteria andIpIn(List<String> values) {
      if (values != null && ! values.isEmpty()) addCriterion("ip in", values, "ip");
      return (Criteria) this;
    }

    public Criteria andIpNotIn(List<String> values) {
      if (values != null && ! values.isEmpty()) addCriterion("ip not in", values, "ip");
      return (Criteria) this;
    }

    public Criteria andIpBetween(String head, String tail) {
      if(head != null && tail != null) addCriterion("ip between", head, tail, "ip");
      return (Criteria) this;
    }

    public Criteria andIpNotBetween(String head, String tail) {
      if(head != null && tail != null) addCriterion("ip not between", head, tail, "ip");
      return (Criteria) this;
    }

    public Criteria andLoginDatetimeIsNull() {
      addCriterion("login_datetime is null");
      return (Criteria) this;
    }

    public Criteria andLoginDatetimeIsNotNull() {
      addCriterion("login_datetime is not null");
      return (Criteria) this;
    }

    public Criteria andLoginDatetimeEqualTo(Date value) {
      if(value != null) addCriterion("login_datetime =", value, "loginDatetime");
      return (Criteria) this;
    }

    public Criteria andLoginDatetimeNotEqualTo(Date value) {
      if(value != null) addCriterion("login_datetime <>", value, "loginDatetime");
      return (Criteria) this;
    }

    public Criteria andLoginDatetimeGreaterThan(Date value) {
      if(value != null) addCriterion("login_datetime >", value, "loginDatetime");
      return (Criteria) this;
    }

    public Criteria andLoginDatetimeGreaterThanOrEqualTo(Date value) {
      if(value != null) addCriterion("login_datetime >=", value, "loginDatetime");
      return (Criteria) this;
    }

    public Criteria andLoginDatetimeLessThan(Date value) {
      if(value != null) addCriterion("login_datetime <", value, "loginDatetime");
      return (Criteria) this;
    }

    public Criteria andLoginDatetimeLessThanOrEqualTo(Date value) {
      if(value != null) addCriterion("login_datetime <=", value, "loginDatetime");
      return (Criteria) this;
    }

    public Criteria andLoginDatetimeIn(List<Date> values) {
      if (values != null && ! values.isEmpty()) addCriterion("login_datetime in", values, "loginDatetime");
      return (Criteria) this;
    }

    public Criteria andLoginDatetimeNotIn(List<Date> values) {
      if (values != null && ! values.isEmpty()) addCriterion("login_datetime not in", values, "loginDatetime");
      return (Criteria) this;
    }

    public Criteria andLoginDatetimeBetween(Date head, Date tail) {
      if(head != null && tail != null) addCriterion("login_datetime between", head, tail, "loginDatetime");
      return (Criteria) this;
    }

    public Criteria andLoginDatetimeNotBetween(Date head, Date tail) {
      if(head != null && tail != null) addCriterion("login_datetime not between", head, tail, "loginDatetime");
      return (Criteria) this;
    }
  }

  public static class Criteria extends GeneratedCriteria {
    private LoginLogExample example;

    protected Criteria(LoginLogExample example) {
      super();
      this.example = example;
    }

    public LoginLogExample example() {
      return this.example;
    }
  }

  public static class Criterion {
    private String condition;

    private Object value;

    private Object secondValue;

    private boolean noValue;

    private boolean singleValue;

    private boolean betweenValue;

    private boolean listValue;

    private String typeHandler;

    public String getCondition() {
      return condition;
    }

    public Object getValue() {
      return value;
    }

    public Object getSecondValue() {
      return secondValue;
    }

    public boolean isNoValue() {
      return noValue;
    }

    public boolean isSingleValue() {
      return singleValue;
    }

    public boolean isBetweenValue() {
      return betweenValue;
    }

    public boolean isListValue() {
      return listValue;
    }

    public String getTypeHandler() {
      return typeHandler;
    }

    protected Criterion(String condition) {
      super();
      this.condition = condition;
      this.typeHandler = null;
      this.noValue = true;
    }

    protected Criterion(String condition, Object value, String typeHandler) {
      super();
      this.condition = condition;
      this.value = value;
      this.typeHandler = typeHandler;
      if (value instanceof List<?>) {
        this.listValue = true;
      } else {
        this.singleValue = true;
      }
    }

    protected Criterion(String condition, Object value) {
      this(condition, value, null);
    }

    protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
      super();
      this.condition = condition;
      this.value = value;
      this.secondValue = secondValue;
      this.typeHandler = typeHandler;
      this.betweenValue = true;
    }

    protected Criterion(String condition, Object value, Object secondValue) {
      this(condition, value, secondValue, null);
    }
  }
}