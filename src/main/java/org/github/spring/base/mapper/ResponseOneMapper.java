//*****************************************************************************
// The file is automatically generated by the program, do not manually modify. 
//*****************************************************************************

package org.github.spring.base.mapper;

import java.util.List;
import javax.annotation.Nullable;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.ResultMap;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.exceptions.TooManyResultsException;
import org.github.spring.annotation.QueryInterface;
import org.github.spring.base.entity.ResponseOneEntity;
import org.github.spring.base.example.ResponseOneExample;
import org.github.spring.base.key.ResponseOneKey;
import org.github.spring.footstone.MyBatisMapper;

@QueryInterface
public interface ResponseOneMapper extends MyBatisMapper {
  long countByExample(ResponseOneExample example);

  int deleteByExample(ResponseOneExample example);

  @Delete({
    "delete from sampledb.t_response_one",
    "where post_id = #{postId,jdbcType=VARCHAR}"
  })
  int deleteByPrimaryKey(ResponseOneKey key);

  @Insert({
    "insert into sampledb.t_response_one (post_id, user_id, ",
    "tid, `text`, respond, ",
    "create_time)",
    "values (#{postId,jdbcType=VARCHAR}, #{userId,jdbcType=VARCHAR}, ",
    "#{tid,jdbcType=VARCHAR}, #{text,jdbcType=VARCHAR}, #{respond,jdbcType=VARCHAR}, ",
    "#{createTime,jdbcType=TIMESTAMP})"
  })
  int insert(ResponseOneEntity record);

  int insertSelective(ResponseOneEntity record);

  List<ResponseOneEntity> selectByExample(ResponseOneExample example);

  @Select({
    "select",
    "post_id, user_id, tid, `text`, respond, create_time",
    "from sampledb.t_response_one",
    "where post_id = #{postId,jdbcType=VARCHAR}"
  })
  @ResultMap("org.github.spring.base.mapper.ResponseOneMapper.BaseResultMap")
  ResponseOneEntity selectByPrimaryKey(ResponseOneKey key);

  int updateByExampleSelective(@Param("record") ResponseOneEntity record, @Param("example") ResponseOneExample example);

  int updateByExample(@Param("record") ResponseOneEntity record, @Param("example") ResponseOneExample example);

  int updateByPrimaryKeySelective(ResponseOneEntity record);

  @Update({
    "update sampledb.t_response_one",
    "set user_id = #{userId,jdbcType=VARCHAR},",
      "tid = #{tid,jdbcType=VARCHAR},",
      "`text` = #{text,jdbcType=VARCHAR},",
      "respond = #{respond,jdbcType=VARCHAR},",
      "create_time = #{createTime,jdbcType=TIMESTAMP}",
    "where post_id = #{postId,jdbcType=VARCHAR}"
  })
  int updateByPrimaryKey(ResponseOneEntity record);

  int batchInsert(List<ResponseOneEntity> list);

  int batchUpdate(List<ResponseOneEntity> list);

  int upsert(@Param("record") ResponseOneEntity record, @Param("array") String[] array);

  int upsertSelective(@Param("record") ResponseOneEntity record, @Param("array") String[] array);

  @Nullable
  ResponseOneEntity selectByUniqueKey(ResponseOneEntity record) throws TooManyResultsException;
}