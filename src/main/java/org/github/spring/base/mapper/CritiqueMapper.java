//*****************************************************************************
// The file is automatically generated by the program, do not manually modify. 
//*****************************************************************************

package org.github.spring.base.mapper;

import java.util.List;
import javax.annotation.Nullable;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.ResultMap;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.exceptions.TooManyResultsException;
import org.github.spring.annotation.QueryInterface;
import org.github.spring.base.entity.CritiqueEntity;
import org.github.spring.base.example.CritiqueExample;
import org.github.spring.base.key.CritiqueKey;
import org.github.spring.footstone.MyBatisMapper;

@QueryInterface
public interface CritiqueMapper extends MyBatisMapper {
  long countByExample(CritiqueExample example);

  int deleteByExample(CritiqueExample example);

  @Delete({
    "delete from sampledb.critique",
    "where id = #{id,jdbcType=INTEGER}"
  })
  int deleteByPrimaryKey(CritiqueKey key);

  @Insert({
    "insert into sampledb.critique (id, article_id, ",
    "content, `name`, `time`, ",
    "photo, `flag`, notice)",
    "values (#{id,jdbcType=INTEGER}, #{articleId,jdbcType=INTEGER}, ",
    "#{content,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{time,jdbcType=VARCHAR}, ",
    "#{photo,jdbcType=VARCHAR}, #{flag,jdbcType=VARCHAR}, #{notice,jdbcType=VARCHAR})"
  })
  int insert(CritiqueEntity record);

  int insertSelective(CritiqueEntity record);

  List<CritiqueEntity> selectByExample(CritiqueExample example);

  @Select({
    "select",
    "id, article_id, content, `name`, `time`, photo, `flag`, notice",
    "from sampledb.critique",
    "where id = #{id,jdbcType=INTEGER}"
  })
  @ResultMap("org.github.spring.base.mapper.CritiqueMapper.BaseResultMap")
  CritiqueEntity selectByPrimaryKey(CritiqueKey key);

  int updateByExampleSelective(@Param("record") CritiqueEntity record, @Param("example") CritiqueExample example);

  int updateByExample(@Param("record") CritiqueEntity record, @Param("example") CritiqueExample example);

  int updateByPrimaryKeySelective(CritiqueEntity record);

  @Update({
    "update sampledb.critique",
    "set article_id = #{articleId,jdbcType=INTEGER},",
      "content = #{content,jdbcType=VARCHAR},",
      "`name` = #{name,jdbcType=VARCHAR},",
      "`time` = #{time,jdbcType=VARCHAR},",
      "photo = #{photo,jdbcType=VARCHAR},",
      "`flag` = #{flag,jdbcType=VARCHAR},",
      "notice = #{notice,jdbcType=VARCHAR}",
    "where id = #{id,jdbcType=INTEGER}"
  })
  int updateByPrimaryKey(CritiqueEntity record);

  int batchInsert(List<CritiqueEntity> list);

  int batchUpdate(List<CritiqueEntity> list);

  int upsert(@Param("record") CritiqueEntity record, @Param("array") String[] array);

  int upsertSelective(@Param("record") CritiqueEntity record, @Param("array") String[] array);

  @Nullable
  CritiqueEntity selectByUniqueKey(CritiqueEntity record) throws TooManyResultsException;
}