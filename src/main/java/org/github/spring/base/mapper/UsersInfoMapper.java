//*****************************************************************************
// The file is automatically generated by the program, do not manually modify. 
//*****************************************************************************

package org.github.spring.base.mapper;

import java.util.List;
import javax.annotation.Nullable;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.ResultMap;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.exceptions.TooManyResultsException;
import org.github.spring.annotation.QueryInterface;
import org.github.spring.base.entity.UsersInfoEntity;
import org.github.spring.base.example.UsersInfoExample;
import org.github.spring.base.key.UsersInfoKey;
import org.github.spring.footstone.MyBatisMapper;

@QueryInterface
public interface UsersInfoMapper extends MyBatisMapper {
  long countByExample(UsersInfoExample example);

  int deleteByExample(UsersInfoExample example);

  @Delete({
    "delete from sampledb.t_users_info",
    "where user_id = #{userId,jdbcType=VARCHAR}"
  })
  int deleteByPrimaryKey(UsersInfoKey key);

  @Insert({
    "insert into sampledb.t_users_info (user_id, `name`, ",
    "sex, birthday, email, ",
    "tel_phone)",
    "values (#{userId,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, ",
    "#{sex,jdbcType=CHAR}, #{birthday,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, ",
    "#{telPhone,jdbcType=VARCHAR})"
  })
  int insert(UsersInfoEntity record);

  int insertSelective(UsersInfoEntity record);

  List<UsersInfoEntity> selectByExample(UsersInfoExample example);

  @Select({
    "select",
    "user_id, `name`, sex, birthday, email, tel_phone",
    "from sampledb.t_users_info",
    "where user_id = #{userId,jdbcType=VARCHAR}"
  })
  @ResultMap("org.github.spring.base.mapper.UsersInfoMapper.BaseResultMap")
  UsersInfoEntity selectByPrimaryKey(UsersInfoKey key);

  int updateByExampleSelective(@Param("record") UsersInfoEntity record, @Param("example") UsersInfoExample example);

  int updateByExample(@Param("record") UsersInfoEntity record, @Param("example") UsersInfoExample example);

  int updateByPrimaryKeySelective(UsersInfoEntity record);

  @Update({
    "update sampledb.t_users_info",
    "set `name` = #{name,jdbcType=VARCHAR},",
      "sex = #{sex,jdbcType=CHAR},",
      "birthday = #{birthday,jdbcType=VARCHAR},",
      "email = #{email,jdbcType=VARCHAR},",
      "tel_phone = #{telPhone,jdbcType=VARCHAR}",
    "where user_id = #{userId,jdbcType=VARCHAR}"
  })
  int updateByPrimaryKey(UsersInfoEntity record);

  int batchInsert(List<UsersInfoEntity> list);

  int batchUpdate(List<UsersInfoEntity> list);

  int upsert(@Param("record") UsersInfoEntity record, @Param("array") String[] array);

  int upsertSelective(@Param("record") UsersInfoEntity record, @Param("array") String[] array);

  @Nullable
  UsersInfoEntity selectByUniqueKey(UsersInfoEntity record) throws TooManyResultsException;
}