//*****************************************************************************
// The file is automatically generated by the program, do not manually modify. 
//*****************************************************************************

package org.github.spring.base.mapper;

import java.util.List;
import javax.annotation.Nullable;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.ResultMap;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.exceptions.TooManyResultsException;
import org.github.spring.annotation.QueryInterface;
import org.github.spring.base.entity.ArticleEntity;
import org.github.spring.base.example.ArticleExample;
import org.github.spring.base.key.ArticleKey;
import org.github.spring.footstone.MyBatisMapper;

@QueryInterface
public interface ArticleMapper extends MyBatisMapper {
  long countByExample(ArticleExample example);

  int deleteByExample(ArticleExample example);

  @Delete({
    "delete from sampledb.article",
    "where id = #{id,jdbcType=INTEGER}"
  })
  int deleteByPrimaryKey(ArticleKey key);

  @Insert({
    "insert into sampledb.article (id, title, ",
    "content, image, ",
    "`time`, editer, `count`, ",
    "count1, `flag`, notice, ",
    "keywords)",
    "values (#{id,jdbcType=INTEGER}, #{title,jdbcType=VARCHAR}, ",
    "#{content,jdbcType=VARCHAR}, #{image,jdbcType=VARCHAR}, ",
    "#{time,jdbcType=VARCHAR}, #{editer,jdbcType=VARCHAR}, #{count,jdbcType=INTEGER}, ",
    "#{count1,jdbcType=INTEGER}, #{flag,jdbcType=VARCHAR}, #{notice,jdbcType=VARCHAR}, ",
    "#{keywords,jdbcType=VARCHAR})"
  })
  int insert(ArticleEntity record);

  int insertSelective(ArticleEntity record);

  List<ArticleEntity> selectByExample(ArticleExample example);

  @Select({
    "select",
    "id, title, content, image, `time`, editer, `count`, count1, `flag`, notice, ",
    "keywords",
    "from sampledb.article",
    "where id = #{id,jdbcType=INTEGER}"
  })
  @ResultMap("org.github.spring.base.mapper.ArticleMapper.BaseResultMap")
  ArticleEntity selectByPrimaryKey(ArticleKey key);

  int updateByExampleSelective(@Param("record") ArticleEntity record, @Param("example") ArticleExample example);

  int updateByExample(@Param("record") ArticleEntity record, @Param("example") ArticleExample example);

  int updateByPrimaryKeySelective(ArticleEntity record);

  @Update({
    "update sampledb.article",
    "set title = #{title,jdbcType=VARCHAR},",
      "content = #{content,jdbcType=VARCHAR},",
      "image = #{image,jdbcType=VARCHAR},",
      "`time` = #{time,jdbcType=VARCHAR},",
      "editer = #{editer,jdbcType=VARCHAR},",
      "`count` = #{count,jdbcType=INTEGER},",
      "count1 = #{count1,jdbcType=INTEGER},",
      "`flag` = #{flag,jdbcType=VARCHAR},",
      "notice = #{notice,jdbcType=VARCHAR},",
      "keywords = #{keywords,jdbcType=VARCHAR}",
    "where id = #{id,jdbcType=INTEGER}"
  })
  int updateByPrimaryKey(ArticleEntity record);

  int batchInsert(List<ArticleEntity> list);

  int batchUpdate(List<ArticleEntity> list);

  int upsert(@Param("record") ArticleEntity record, @Param("array") String[] array);

  int upsertSelective(@Param("record") ArticleEntity record, @Param("array") String[] array);

  @Nullable
  ArticleEntity selectByUniqueKey(ArticleEntity record) throws TooManyResultsException;
}