//*****************************************************************************
// The file is automatically generated by the program, do not manually modify. 
//*****************************************************************************

package org.github.spring.base.mapper;

import java.util.List;
import javax.annotation.Nullable;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.ResultMap;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.exceptions.TooManyResultsException;
import org.github.spring.annotation.QueryInterface;
import org.github.spring.base.entity.UserEntity;
import org.github.spring.base.example.UserExample;
import org.github.spring.base.key.UserKey;
import org.github.spring.footstone.MyBatisMapper;

@QueryInterface
public interface UserMapper extends MyBatisMapper {
  long countByExample(UserExample example);

  int deleteByExample(UserExample example);

  @Delete({
    "delete from sampledb.t_user",
    "where user_id = #{userId,jdbcType=INTEGER}"
  })
  int deleteByPrimaryKey(UserKey key);

  @Insert({
    "insert into sampledb.t_user (user_id, user_name, ",
    "credits, `password`, ",
    "last_visit, last_ip)",
    "values (#{userId,jdbcType=INTEGER}, #{userName,jdbcType=VARCHAR}, ",
    "#{credits,jdbcType=INTEGER}, #{password,jdbcType=VARCHAR}, ",
    "#{lastVisit,jdbcType=TIMESTAMP}, #{lastIp,jdbcType=VARCHAR})"
  })
  int insert(UserEntity record);

  int insertSelective(UserEntity record);

  List<UserEntity> selectByExample(UserExample example);

  @Select({
    "select",
    "user_id, user_name, credits, `password`, last_visit, last_ip",
    "from sampledb.t_user",
    "where user_id = #{userId,jdbcType=INTEGER}"
  })
  @ResultMap("org.github.spring.base.mapper.UserMapper.BaseResultMap")
  UserEntity selectByPrimaryKey(UserKey key);

  int updateByExampleSelective(@Param("record") UserEntity record, @Param("example") UserExample example);

  int updateByExample(@Param("record") UserEntity record, @Param("example") UserExample example);

  int updateByPrimaryKeySelective(UserEntity record);

  @Update({
    "update sampledb.t_user",
    "set user_name = #{userName,jdbcType=VARCHAR},",
      "credits = #{credits,jdbcType=INTEGER},",
      "`password` = #{password,jdbcType=VARCHAR},",
      "last_visit = #{lastVisit,jdbcType=TIMESTAMP},",
      "last_ip = #{lastIp,jdbcType=VARCHAR}",
    "where user_id = #{userId,jdbcType=INTEGER}"
  })
  int updateByPrimaryKey(UserEntity record);

  int batchInsert(List<UserEntity> list);

  int batchUpdate(List<UserEntity> list);

  int upsert(@Param("record") UserEntity record, @Param("array") String[] array);

  int upsertSelective(@Param("record") UserEntity record, @Param("array") String[] array);

  @Nullable
  UserEntity selectByUniqueKey(UserEntity record) throws TooManyResultsException;
}