//*****************************************************************************
// The file is automatically generated by the program, do not manually modify. 
//*****************************************************************************

package org.github.spring.base.mapper;

import java.util.List;
import javax.annotation.Nullable;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.ResultMap;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.exceptions.TooManyResultsException;
import org.github.spring.annotation.QueryInterface;
import org.github.spring.base.entity.PhotoEntity;
import org.github.spring.base.example.PhotoExample;
import org.github.spring.base.key.PhotoKey;
import org.github.spring.footstone.MyBatisMapper;

@QueryInterface
public interface PhotoMapper extends MyBatisMapper {
  long countByExample(PhotoExample example);

  int deleteByExample(PhotoExample example);

  @Delete({
    "delete from sampledb.photo",
    "where id = #{id,jdbcType=INTEGER}"
  })
  int deleteByPrimaryKey(PhotoKey key);

  @Insert({
    "insert into sampledb.photo (id, image, ",
    "note, content, `flag`, ",
    "notice, `time`, album_id)",
    "values (#{id,jdbcType=INTEGER}, #{image,jdbcType=VARCHAR}, ",
    "#{note,jdbcType=VARCHAR}, #{content,jdbcType=VARCHAR}, #{flag,jdbcType=VARCHAR}, ",
    "#{notice,jdbcType=VARCHAR}, #{time,jdbcType=VARCHAR}, #{albumId,jdbcType=INTEGER})"
  })
  int insert(PhotoEntity record);

  int insertSelective(PhotoEntity record);

  List<PhotoEntity> selectByExample(PhotoExample example);

  @Select({
    "select",
    "id, image, note, content, `flag`, notice, `time`, album_id",
    "from sampledb.photo",
    "where id = #{id,jdbcType=INTEGER}"
  })
  @ResultMap("org.github.spring.base.mapper.PhotoMapper.BaseResultMap")
  PhotoEntity selectByPrimaryKey(PhotoKey key);

  int updateByExampleSelective(@Param("record") PhotoEntity record, @Param("example") PhotoExample example);

  int updateByExample(@Param("record") PhotoEntity record, @Param("example") PhotoExample example);

  int updateByPrimaryKeySelective(PhotoEntity record);

  @Update({
    "update sampledb.photo",
    "set image = #{image,jdbcType=VARCHAR},",
      "note = #{note,jdbcType=VARCHAR},",
      "content = #{content,jdbcType=VARCHAR},",
      "`flag` = #{flag,jdbcType=VARCHAR},",
      "notice = #{notice,jdbcType=VARCHAR},",
      "`time` = #{time,jdbcType=VARCHAR},",
      "album_id = #{albumId,jdbcType=INTEGER}",
    "where id = #{id,jdbcType=INTEGER}"
  })
  int updateByPrimaryKey(PhotoEntity record);

  int batchInsert(List<PhotoEntity> list);

  int batchUpdate(List<PhotoEntity> list);

  int upsert(@Param("record") PhotoEntity record, @Param("array") String[] array);

  int upsertSelective(@Param("record") PhotoEntity record, @Param("array") String[] array);

  @Nullable
  PhotoEntity selectByUniqueKey(PhotoEntity record) throws TooManyResultsException;
}