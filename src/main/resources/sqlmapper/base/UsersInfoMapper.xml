<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.github.spring.base.mapper.UsersInfoMapper">
  <resultMap id="BaseResultMap" type="org.github.spring.base.entity.UsersInfoEntity">
  <id column="user_id" jdbcType="VARCHAR" property="userId" />
  <result column="name" jdbcType="VARCHAR" property="name" />
  <result column="sex" jdbcType="CHAR" property="sex" />
  <result column="birthday" jdbcType="VARCHAR" property="birthday" />
  <result column="email" jdbcType="VARCHAR" property="email" />
  <result column="tel_phone" jdbcType="VARCHAR" property="telPhone" />
  </resultMap>
  <sql id="Example_Where_Clause">
  <where>
    <foreach collection="oredCriteria" item="criteria" separator="or">
    <if test="criteria.valid">
      <trim prefix="(" prefixOverrides="and" suffix=")">
      <foreach collection="criteria.criteria" item="criterion">
        <choose>
        <when test="criterion.noValue">
          and ${criterion.condition}
        </when>
        <when test="criterion.singleValue">
          and ${criterion.condition} #{criterion.value}
        </when>
        <when test="criterion.betweenValue">
          and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
        </when>
        <when test="criterion.listValue">
          and ${criterion.condition}
          <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
          #{listItem}
          </foreach>
        </when>
        </choose>
      </foreach>
      </trim>
    </if>
    </foreach>
  </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
  <where>
    <foreach collection="example.oredCriteria" item="criteria" separator="or">
    <if test="criteria.valid">
      <trim prefix="(" prefixOverrides="and" suffix=")">
      <foreach collection="criteria.criteria" item="criterion">
        <choose>
        <when test="criterion.noValue">
          and ${criterion.condition}
        </when>
        <when test="criterion.singleValue">
          and ${criterion.condition} #{criterion.value}
        </when>
        <when test="criterion.betweenValue">
          and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
        </when>
        <when test="criterion.listValue">
          and ${criterion.condition}
          <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
          #{listItem}
          </foreach>
        </when>
        </choose>
      </foreach>
      </trim>
    </if>
    </foreach>
  </where>
  </sql>
  <sql id="Base_Column_List">
  user_id, `name`, sex, birthday, email, tel_phone
  </sql>
  <select id="selectByExample" parameterType="org.github.spring.base.example.UsersInfoExample" resultMap="BaseResultMap">
  select
  <if test="distinct">
    distinct
  </if>
  <include refid="Base_Column_List" />
  from sampledb.t_users_info
  <if test="_parameter != null">
    <include refid="Example_Where_Clause" />
  </if>
  <if test="orderByClause != null">
    order by ${orderByClause}
  </if>
  </select>
  <delete id="deleteByExample" parameterType="org.github.spring.base.example.UsersInfoExample">
  delete from sampledb.t_users_info
  <if test="_parameter != null">
    <include refid="Example_Where_Clause" />
  </if>
  </delete>
  <insert id="insertSelective" parameterType="org.github.spring.base.entity.UsersInfoEntity">
  insert into sampledb.t_users_info
  <trim prefix="(" suffix=")" suffixOverrides=",">
    <if test="userId != null">
    user_id,
    </if>
    <if test="name != null">
    `name`,
    </if>
    <if test="sex != null">
    sex,
    </if>
    <if test="birthday != null">
    birthday,
    </if>
    <if test="email != null">
    email,
    </if>
    <if test="telPhone != null">
    tel_phone,
    </if>
  </trim>
  <trim prefix="values (" suffix=")" suffixOverrides=",">
    <if test="userId != null">
    #{userId,jdbcType=VARCHAR},
    </if>
    <if test="name != null">
    #{name,jdbcType=VARCHAR},
    </if>
    <if test="sex != null">
    #{sex,jdbcType=CHAR},
    </if>
    <if test="birthday != null">
    #{birthday,jdbcType=VARCHAR},
    </if>
    <if test="email != null">
    #{email,jdbcType=VARCHAR},
    </if>
    <if test="telPhone != null">
    #{telPhone,jdbcType=VARCHAR},
    </if>
  </trim>
  </insert>
  <select id="countByExample" parameterType="org.github.spring.base.example.UsersInfoExample" resultType="java.lang.Long">
  select count(*) from sampledb.t_users_info
  <if test="_parameter != null">
    <include refid="Example_Where_Clause" />
  </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
  update sampledb.t_users_info
  <set>
    <if test="record.userId != null">
    user_id = #{record.userId,jdbcType=VARCHAR},
    </if>
    <if test="record.name != null">
    `name` = #{record.name,jdbcType=VARCHAR},
    </if>
    <if test="record.sex != null">
    sex = #{record.sex,jdbcType=CHAR},
    </if>
    <if test="record.birthday != null">
    birthday = #{record.birthday,jdbcType=VARCHAR},
    </if>
    <if test="record.email != null">
    email = #{record.email,jdbcType=VARCHAR},
    </if>
    <if test="record.telPhone != null">
    tel_phone = #{record.telPhone,jdbcType=VARCHAR},
    </if>
  </set>
  <if test="_parameter != null">
    <include refid="Update_By_Example_Where_Clause" />
  </if>
  </update>
  <update id="updateByExample" parameterType="map">
  update sampledb.t_users_info
  set user_id = #{record.userId,jdbcType=VARCHAR},
    `name` = #{record.name,jdbcType=VARCHAR},
    sex = #{record.sex,jdbcType=CHAR},
    birthday = #{record.birthday,jdbcType=VARCHAR},
    email = #{record.email,jdbcType=VARCHAR},
    tel_phone = #{record.telPhone,jdbcType=VARCHAR}
  <if test="_parameter != null">
    <include refid="Update_By_Example_Where_Clause" />
  </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="org.github.spring.base.entity.UsersInfoEntity">
  update sampledb.t_users_info
  <set>
    <if test="name != null">
    `name` = #{name,jdbcType=VARCHAR},
    </if>
    <if test="sex != null">
    sex = #{sex,jdbcType=CHAR},
    </if>
    <if test="birthday != null">
    birthday = #{birthday,jdbcType=VARCHAR},
    </if>
    <if test="email != null">
    email = #{email,jdbcType=VARCHAR},
    </if>
    <if test="telPhone != null">
    tel_phone = #{telPhone,jdbcType=VARCHAR},
    </if>
  </set>
  where user_id = #{userId,jdbcType=VARCHAR}
  </update>
  <insert id="batchInsert" parameterType="list">
  <choose>
    <when test="list != null and list.size != 0">
    insert into sampledb.t_users_info
    <trim prefix="(" suffix=")" suffixOverrides=",">
      user_id,
      `name`,
      sex,
      birthday,
      email,
      tel_phone,
    </trim>
     values 
    <foreach collection="list" index="index" item="item" separator=",">
      <trim prefix="(" suffix=")" suffixOverrides=",">
      #{item.userId,jdbcType=VARCHAR},
      #{item.name,jdbcType=VARCHAR},
      #{item.sex,jdbcType=CHAR},
      #{item.birthday,jdbcType=VARCHAR},
      #{item.email,jdbcType=VARCHAR},
      #{item.telPhone,jdbcType=VARCHAR},
      </trim>
    </foreach>
    </when>
    <otherwise>
    SELECT 0
    </otherwise>
  </choose>
  </insert>
  <update id="batchUpdate" parameterType="list">
  <choose>
    <when test="list != null and list.size != 0">
    <foreach collection="list" index="index" item="item" separator=";">
       update sampledb.t_users_info
      <set>
      <trim suffixOverrides=",">
        <if test="item.name != null">
        `name` = #{item.name,jdbcType=VARCHAR},
        </if>
        <if test="item.sex != null">
        sex = #{item.sex,jdbcType=CHAR},
        </if>
        <if test="item.birthday != null">
        birthday = #{item.birthday,jdbcType=VARCHAR},
        </if>
        <if test="item.email != null">
        email = #{item.email,jdbcType=VARCHAR},
        </if>
        <if test="item.telPhone != null">
        tel_phone = #{item.telPhone,jdbcType=VARCHAR},
        </if>
      </trim>
      </set>
      <where>
      <trim suffixOverrides=",">
        user_id = #{item.userId,jdbcType=VARCHAR},
      </trim>
      </where>
    </foreach>
    </when>
    <otherwise>
    SELECT 0
    </otherwise>
  </choose>
  </update>
  <sql id="Identifiers_Array_Conditions">
  <foreach collection="array" index="index" item="item" separator=" and ">
    <if test="item == 'userId'">
    user_id = #{record.userId,jdbcType=VARCHAR}
    </if>
    <if test="item == 'name'">
    `name` = #{record.name,jdbcType=VARCHAR}
    </if>
    <if test="item == 'sex'">
    sex = #{record.sex,jdbcType=CHAR}
    </if>
    <if test="item == 'birthday'">
    birthday = #{record.birthday,jdbcType=VARCHAR}
    </if>
    <if test="item == 'email'">
    email = #{record.email,jdbcType=VARCHAR}
    </if>
    <if test="item == 'telPhone'">
    tel_phone = #{record.telPhone,jdbcType=VARCHAR}
    </if>
  </foreach>
  </sql>
  <update id="upsert" parameterType="map">
  insert into sampledb.t_users_info
  <trim prefix="(" suffix=")" suffixOverrides=",">
    user_id,
    `name`,
    sex,
    birthday,
    email,
    tel_phone,
  </trim>
  values 
  <trim prefix="(" suffix=")" suffixOverrides=",">
    #{record.userId,jdbcType=VARCHAR},
    #{record.name,jdbcType=VARCHAR},
    #{record.sex,jdbcType=CHAR},
    #{record.birthday,jdbcType=VARCHAR},
    #{record.email,jdbcType=VARCHAR},
    #{record.telPhone,jdbcType=VARCHAR},
  </trim>
  on duplicate key update 
  <trim suffixOverrides=",">
    user_id = #{record.userId,jdbcType=VARCHAR},
    `name` = #{record.name,jdbcType=VARCHAR},
    sex = #{record.sex,jdbcType=CHAR},
    birthday = #{record.birthday,jdbcType=VARCHAR},
    email = #{record.email,jdbcType=VARCHAR},
    tel_phone = #{record.telPhone,jdbcType=VARCHAR},
  </trim>
  </update>
  <update id="upsertSelective" parameterType="map">
  insert into sampledb.t_users_info
  <trim prefix="(" suffix=")" suffixOverrides=",">
    <if test="record.userId != null">
    user_id,
    </if>
    <if test="record.name != null">
    `name`,
    </if>
    <if test="record.sex != null">
    sex,
    </if>
    <if test="record.birthday != null">
    birthday,
    </if>
    <if test="record.email != null">
    email,
    </if>
    <if test="record.telPhone != null">
    tel_phone,
    </if>
  </trim>
  values 
  <trim prefix="(" suffix=")" suffixOverrides=",">
    <if test="record.userId != null">
    #{record.userId,jdbcType=VARCHAR},
    </if>
    <if test="record.name != null">
    #{record.name,jdbcType=VARCHAR},
    </if>
    <if test="record.sex != null">
    #{record.sex,jdbcType=CHAR},
    </if>
    <if test="record.birthday != null">
    #{record.birthday,jdbcType=VARCHAR},
    </if>
    <if test="record.email != null">
    #{record.email,jdbcType=VARCHAR},
    </if>
    <if test="record.telPhone != null">
    #{record.telPhone,jdbcType=VARCHAR},
    </if>
  </trim>
  on duplicate key update 
  <trim suffixOverrides=",">
    <if test="record.userId != null">
    user_id = #{record.userId,jdbcType=VARCHAR},
    </if>
    <if test="record.name != null">
    `name` = #{record.name,jdbcType=VARCHAR},
    </if>
    <if test="record.sex != null">
    sex = #{record.sex,jdbcType=CHAR},
    </if>
    <if test="record.birthday != null">
    birthday = #{record.birthday,jdbcType=VARCHAR},
    </if>
    <if test="record.email != null">
    email = #{record.email,jdbcType=VARCHAR},
    </if>
    <if test="record.telPhone != null">
    tel_phone = #{record.telPhone,jdbcType=VARCHAR},
    </if>
  </trim>
  </update>
  <select id="selectByUniqueKey" parameterType="org.github.spring.base.entity.UsersInfoEntity" resultMap="BaseResultMap">
  select
  <include refid="Base_Column_List" />
  from sampledb.t_users_info
  <where>
    <trim suffixOverrides=",">
    <if test="record.name != null">
      `name` = #{record.name,jdbcType=VARCHAR},
    </if>
    <if test="record.sex != null">
      sex = #{record.sex,jdbcType=CHAR},
    </if>
    <if test="record.birthday != null">
      birthday = #{record.birthday,jdbcType=VARCHAR},
    </if>
    <if test="record.email != null">
      email = #{record.email,jdbcType=VARCHAR},
    </if>
    <if test="record.telPhone != null">
      tel_phone = #{record.telPhone,jdbcType=VARCHAR},
    </if>
    </trim>
  </where>
  </select>
</mapper>