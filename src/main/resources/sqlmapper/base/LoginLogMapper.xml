<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.github.spring.base.mapper.LoginLogMapper">
  <resultMap id="BaseResultMap" type="org.github.spring.base.entity.LoginLogEntity">
  <id column="login_log_id" jdbcType="INTEGER" property="loginLogId" />
  <result column="user_id" jdbcType="INTEGER" property="userId" />
  <result column="ip" jdbcType="VARCHAR" property="ip" />
  <result column="login_datetime" jdbcType="TIMESTAMP" property="loginDatetime" />
  </resultMap>
  <sql id="Example_Where_Clause">
  <where>
    <foreach collection="oredCriteria" item="criteria" separator="or">
    <if test="criteria.valid">
      <trim prefix="(" prefixOverrides="and" suffix=")">
      <foreach collection="criteria.criteria" item="criterion">
        <choose>
        <when test="criterion.noValue">
          and ${criterion.condition}
        </when>
        <when test="criterion.singleValue">
          and ${criterion.condition} #{criterion.value}
        </when>
        <when test="criterion.betweenValue">
          and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
        </when>
        <when test="criterion.listValue">
          and ${criterion.condition}
          <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
          #{listItem}
          </foreach>
        </when>
        </choose>
      </foreach>
      </trim>
    </if>
    </foreach>
  </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
  <where>
    <foreach collection="example.oredCriteria" item="criteria" separator="or">
    <if test="criteria.valid">
      <trim prefix="(" prefixOverrides="and" suffix=")">
      <foreach collection="criteria.criteria" item="criterion">
        <choose>
        <when test="criterion.noValue">
          and ${criterion.condition}
        </when>
        <when test="criterion.singleValue">
          and ${criterion.condition} #{criterion.value}
        </when>
        <when test="criterion.betweenValue">
          and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
        </when>
        <when test="criterion.listValue">
          and ${criterion.condition}
          <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
          #{listItem}
          </foreach>
        </when>
        </choose>
      </foreach>
      </trim>
    </if>
    </foreach>
  </where>
  </sql>
  <sql id="Base_Column_List">
  login_log_id, user_id, ip, login_datetime
  </sql>
  <select id="selectByExample" parameterType="org.github.spring.base.example.LoginLogExample" resultMap="BaseResultMap">
  select
  <if test="distinct">
    distinct
  </if>
  <include refid="Base_Column_List" />
  from sampledb.t_login_log
  <if test="_parameter != null">
    <include refid="Example_Where_Clause" />
  </if>
  <if test="orderByClause != null">
    order by ${orderByClause}
  </if>
  </select>
  <delete id="deleteByExample" parameterType="org.github.spring.base.example.LoginLogExample">
  delete from sampledb.t_login_log
  <if test="_parameter != null">
    <include refid="Example_Where_Clause" />
  </if>
  </delete>
  <insert id="insertSelective" parameterType="org.github.spring.base.entity.LoginLogEntity">
  insert into sampledb.t_login_log
  <trim prefix="(" suffix=")" suffixOverrides=",">
    <if test="loginLogId != null">
    login_log_id,
    </if>
    <if test="userId != null">
    user_id,
    </if>
    <if test="ip != null">
    ip,
    </if>
    <if test="loginDatetime != null">
    login_datetime,
    </if>
  </trim>
  <trim prefix="values (" suffix=")" suffixOverrides=",">
    <if test="loginLogId != null">
    #{loginLogId,jdbcType=INTEGER},
    </if>
    <if test="userId != null">
    #{userId,jdbcType=INTEGER},
    </if>
    <if test="ip != null">
    #{ip,jdbcType=VARCHAR},
    </if>
    <if test="loginDatetime != null">
    #{loginDatetime,jdbcType=TIMESTAMP},
    </if>
  </trim>
  </insert>
  <select id="countByExample" parameterType="org.github.spring.base.example.LoginLogExample" resultType="java.lang.Long">
  select count(*) from sampledb.t_login_log
  <if test="_parameter != null">
    <include refid="Example_Where_Clause" />
  </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
  update sampledb.t_login_log
  <set>
    <if test="record.loginLogId != null">
    login_log_id = #{record.loginLogId,jdbcType=INTEGER},
    </if>
    <if test="record.userId != null">
    user_id = #{record.userId,jdbcType=INTEGER},
    </if>
    <if test="record.ip != null">
    ip = #{record.ip,jdbcType=VARCHAR},
    </if>
    <if test="record.loginDatetime != null">
    login_datetime = #{record.loginDatetime,jdbcType=TIMESTAMP},
    </if>
  </set>
  <if test="_parameter != null">
    <include refid="Update_By_Example_Where_Clause" />
  </if>
  </update>
  <update id="updateByExample" parameterType="map">
  update sampledb.t_login_log
  set login_log_id = #{record.loginLogId,jdbcType=INTEGER},
    user_id = #{record.userId,jdbcType=INTEGER},
    ip = #{record.ip,jdbcType=VARCHAR},
    login_datetime = #{record.loginDatetime,jdbcType=TIMESTAMP}
  <if test="_parameter != null">
    <include refid="Update_By_Example_Where_Clause" />
  </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="org.github.spring.base.entity.LoginLogEntity">
  update sampledb.t_login_log
  <set>
    <if test="userId != null">
    user_id = #{userId,jdbcType=INTEGER},
    </if>
    <if test="ip != null">
    ip = #{ip,jdbcType=VARCHAR},
    </if>
    <if test="loginDatetime != null">
    login_datetime = #{loginDatetime,jdbcType=TIMESTAMP},
    </if>
  </set>
  where login_log_id = #{loginLogId,jdbcType=INTEGER}
  </update>
  <insert id="batchInsert" parameterType="list">
  <choose>
    <when test="list != null and list.size != 0">
    insert into sampledb.t_login_log
    <trim prefix="(" suffix=")" suffixOverrides=",">
      login_log_id,
      user_id,
      ip,
      login_datetime,
    </trim>
     values 
    <foreach collection="list" index="index" item="item" separator=",">
      <trim prefix="(" suffix=")" suffixOverrides=",">
      #{item.loginLogId,jdbcType=INTEGER},
      #{item.userId,jdbcType=INTEGER},
      #{item.ip,jdbcType=VARCHAR},
      #{item.loginDatetime,jdbcType=TIMESTAMP},
      </trim>
    </foreach>
    </when>
    <otherwise>
    SELECT 0
    </otherwise>
  </choose>
  </insert>
  <update id="batchUpdate" parameterType="list">
  <choose>
    <when test="list != null and list.size != 0">
    <foreach collection="list" index="index" item="item" separator=";">
       update sampledb.t_login_log
      <set>
      <trim suffixOverrides=",">
        <if test="item.userId != null">
        user_id = #{item.userId,jdbcType=INTEGER},
        </if>
        <if test="item.ip != null">
        ip = #{item.ip,jdbcType=VARCHAR},
        </if>
        <if test="item.loginDatetime != null">
        login_datetime = #{item.loginDatetime,jdbcType=TIMESTAMP},
        </if>
      </trim>
      </set>
      <where>
      <trim suffixOverrides=",">
        login_log_id = #{item.loginLogId,jdbcType=INTEGER},
      </trim>
      </where>
    </foreach>
    </when>
    <otherwise>
    SELECT 0
    </otherwise>
  </choose>
  </update>
  <sql id="Identifiers_Array_Conditions">
  <foreach collection="array" index="index" item="item" separator=" and ">
    <if test="item == 'loginLogId'">
    login_log_id = #{record.loginLogId,jdbcType=INTEGER}
    </if>
    <if test="item == 'userId'">
    user_id = #{record.userId,jdbcType=INTEGER}
    </if>
    <if test="item == 'ip'">
    ip = #{record.ip,jdbcType=VARCHAR}
    </if>
    <if test="item == 'loginDatetime'">
    login_datetime = #{record.loginDatetime,jdbcType=TIMESTAMP}
    </if>
  </foreach>
  </sql>
  <update id="upsert" parameterType="map">
  insert into sampledb.t_login_log
  <trim prefix="(" suffix=")" suffixOverrides=",">
    login_log_id,
    user_id,
    ip,
    login_datetime,
  </trim>
  values 
  <trim prefix="(" suffix=")" suffixOverrides=",">
    #{record.loginLogId,jdbcType=INTEGER},
    #{record.userId,jdbcType=INTEGER},
    #{record.ip,jdbcType=VARCHAR},
    #{record.loginDatetime,jdbcType=TIMESTAMP},
  </trim>
  on duplicate key update 
  <trim suffixOverrides=",">
    login_log_id = #{record.loginLogId,jdbcType=INTEGER},
    user_id = #{record.userId,jdbcType=INTEGER},
    ip = #{record.ip,jdbcType=VARCHAR},
    login_datetime = #{record.loginDatetime,jdbcType=TIMESTAMP},
  </trim>
  </update>
  <update id="upsertSelective" parameterType="map">
  insert into sampledb.t_login_log
  <trim prefix="(" suffix=")" suffixOverrides=",">
    <if test="record.loginLogId != null">
    login_log_id,
    </if>
    <if test="record.userId != null">
    user_id,
    </if>
    <if test="record.ip != null">
    ip,
    </if>
    <if test="record.loginDatetime != null">
    login_datetime,
    </if>
  </trim>
  values 
  <trim prefix="(" suffix=")" suffixOverrides=",">
    <if test="record.loginLogId != null">
    #{record.loginLogId,jdbcType=INTEGER},
    </if>
    <if test="record.userId != null">
    #{record.userId,jdbcType=INTEGER},
    </if>
    <if test="record.ip != null">
    #{record.ip,jdbcType=VARCHAR},
    </if>
    <if test="record.loginDatetime != null">
    #{record.loginDatetime,jdbcType=TIMESTAMP},
    </if>
  </trim>
  on duplicate key update 
  <trim suffixOverrides=",">
    <if test="record.loginLogId != null">
    login_log_id = #{record.loginLogId,jdbcType=INTEGER},
    </if>
    <if test="record.userId != null">
    user_id = #{record.userId,jdbcType=INTEGER},
    </if>
    <if test="record.ip != null">
    ip = #{record.ip,jdbcType=VARCHAR},
    </if>
    <if test="record.loginDatetime != null">
    login_datetime = #{record.loginDatetime,jdbcType=TIMESTAMP},
    </if>
  </trim>
  </update>
  <select id="selectByUniqueKey" parameterType="org.github.spring.base.entity.LoginLogEntity" resultMap="BaseResultMap">
  select
  <include refid="Base_Column_List" />
  from sampledb.t_login_log
  <where>
    <trim suffixOverrides=",">
    <if test="record.userId != null">
      user_id = #{record.userId,jdbcType=INTEGER},
    </if>
    <if test="record.ip != null">
      ip = #{record.ip,jdbcType=VARCHAR},
    </if>
    <if test="record.loginDatetime != null">
      login_datetime = #{record.loginDatetime,jdbcType=TIMESTAMP},
    </if>
    </trim>
  </where>
  </select>
</mapper>