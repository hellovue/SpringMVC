<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.github.spring.base.mapper.OauthClientTokenMapper">
  <resultMap id="BaseResultMap" type="org.github.spring.base.entity.OauthClientTokenEntity">
  <id column="token_id" jdbcType="VARCHAR" property="tokenId" />
  <result column="authentication_id" jdbcType="VARCHAR" property="authenticationId" />
  <result column="user_name" jdbcType="VARCHAR" property="userName" />
  <result column="client_id" jdbcType="VARCHAR" property="clientId" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="org.github.spring.base.blob.OauthClientTokenWithBLOBs">
  <result column="token" jdbcType="LONGVARBINARY" property="token" />
  </resultMap>
  <sql id="Example_Where_Clause">
  <where>
    <foreach collection="oredCriteria" item="criteria" separator="or">
    <if test="criteria.valid">
      <trim prefix="(" prefixOverrides="and" suffix=")">
      <foreach collection="criteria.criteria" item="criterion">
        <choose>
        <when test="criterion.noValue">
          and ${criterion.condition}
        </when>
        <when test="criterion.singleValue">
          and ${criterion.condition} #{criterion.value}
        </when>
        <when test="criterion.betweenValue">
          and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
        </when>
        <when test="criterion.listValue">
          and ${criterion.condition}
          <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
          #{listItem}
          </foreach>
        </when>
        </choose>
      </foreach>
      </trim>
    </if>
    </foreach>
  </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
  <where>
    <foreach collection="example.oredCriteria" item="criteria" separator="or">
    <if test="criteria.valid">
      <trim prefix="(" prefixOverrides="and" suffix=")">
      <foreach collection="criteria.criteria" item="criterion">
        <choose>
        <when test="criterion.noValue">
          and ${criterion.condition}
        </when>
        <when test="criterion.singleValue">
          and ${criterion.condition} #{criterion.value}
        </when>
        <when test="criterion.betweenValue">
          and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
        </when>
        <when test="criterion.listValue">
          and ${criterion.condition}
          <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
          #{listItem}
          </foreach>
        </when>
        </choose>
      </foreach>
      </trim>
    </if>
    </foreach>
  </where>
  </sql>
  <sql id="Base_Column_List">
  token_id, authentication_id, user_name, client_id
  </sql>
  <sql id="Blob_Column_List">
  token
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="org.github.spring.base.example.OauthClientTokenExample" resultMap="ResultMapWithBLOBs">
  select
  <if test="distinct">
    distinct
  </if>
  <include refid="Base_Column_List" />
  ,
  <include refid="Blob_Column_List" />
  from sampledb.oauth_client_token
  <if test="_parameter != null">
    <include refid="Example_Where_Clause" />
  </if>
  <if test="orderByClause != null">
    order by ${orderByClause}
  </if>
  </select>
  <select id="selectByExample" parameterType="org.github.spring.base.example.OauthClientTokenExample" resultMap="BaseResultMap">
  select
  <if test="distinct">
    distinct
  </if>
  <include refid="Base_Column_List" />
  from sampledb.oauth_client_token
  <if test="_parameter != null">
    <include refid="Example_Where_Clause" />
  </if>
  <if test="orderByClause != null">
    order by ${orderByClause}
  </if>
  </select>
  <delete id="deleteByExample" parameterType="org.github.spring.base.example.OauthClientTokenExample">
  delete from sampledb.oauth_client_token
  <if test="_parameter != null">
    <include refid="Example_Where_Clause" />
  </if>
  </delete>
  <insert id="insertSelective" parameterType="org.github.spring.base.blob.OauthClientTokenWithBLOBs">
  insert into sampledb.oauth_client_token
  <trim prefix="(" suffix=")" suffixOverrides=",">
    <if test="tokenId != null">
    token_id,
    </if>
    <if test="authenticationId != null">
    authentication_id,
    </if>
    <if test="userName != null">
    user_name,
    </if>
    <if test="clientId != null">
    client_id,
    </if>
    <if test="token != null">
    token,
    </if>
  </trim>
  <trim prefix="values (" suffix=")" suffixOverrides=",">
    <if test="tokenId != null">
    #{tokenId,jdbcType=VARCHAR},
    </if>
    <if test="authenticationId != null">
    #{authenticationId,jdbcType=VARCHAR},
    </if>
    <if test="userName != null">
    #{userName,jdbcType=VARCHAR},
    </if>
    <if test="clientId != null">
    #{clientId,jdbcType=VARCHAR},
    </if>
    <if test="token != null">
    #{token,jdbcType=LONGVARBINARY},
    </if>
  </trim>
  </insert>
  <select id="countByExample" parameterType="org.github.spring.base.example.OauthClientTokenExample" resultType="java.lang.Long">
  select count(*) from sampledb.oauth_client_token
  <if test="_parameter != null">
    <include refid="Example_Where_Clause" />
  </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
  update sampledb.oauth_client_token
  <set>
    <if test="record.tokenId != null">
    token_id = #{record.tokenId,jdbcType=VARCHAR},
    </if>
    <if test="record.authenticationId != null">
    authentication_id = #{record.authenticationId,jdbcType=VARCHAR},
    </if>
    <if test="record.userName != null">
    user_name = #{record.userName,jdbcType=VARCHAR},
    </if>
    <if test="record.clientId != null">
    client_id = #{record.clientId,jdbcType=VARCHAR},
    </if>
    <if test="record.token != null">
    token = #{record.token,jdbcType=LONGVARBINARY},
    </if>
  </set>
  <if test="_parameter != null">
    <include refid="Update_By_Example_Where_Clause" />
  </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
  update sampledb.oauth_client_token
  set token_id = #{record.tokenId,jdbcType=VARCHAR},
    authentication_id = #{record.authenticationId,jdbcType=VARCHAR},
    user_name = #{record.userName,jdbcType=VARCHAR},
    client_id = #{record.clientId,jdbcType=VARCHAR},
    token = #{record.token,jdbcType=LONGVARBINARY}
  <if test="_parameter != null">
    <include refid="Update_By_Example_Where_Clause" />
  </if>
  </update>
  <update id="updateByExample" parameterType="map">
  update sampledb.oauth_client_token
  set token_id = #{record.tokenId,jdbcType=VARCHAR},
    authentication_id = #{record.authenticationId,jdbcType=VARCHAR},
    user_name = #{record.userName,jdbcType=VARCHAR},
    client_id = #{record.clientId,jdbcType=VARCHAR}
  <if test="_parameter != null">
    <include refid="Update_By_Example_Where_Clause" />
  </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="org.github.spring.base.blob.OauthClientTokenWithBLOBs">
  update sampledb.oauth_client_token
  <set>
    <if test="authenticationId != null">
    authentication_id = #{authenticationId,jdbcType=VARCHAR},
    </if>
    <if test="userName != null">
    user_name = #{userName,jdbcType=VARCHAR},
    </if>
    <if test="clientId != null">
    client_id = #{clientId,jdbcType=VARCHAR},
    </if>
    <if test="token != null">
    token = #{token,jdbcType=LONGVARBINARY},
    </if>
  </set>
  where token_id = #{tokenId,jdbcType=VARCHAR}
  </update>
  <insert id="batchInsert" parameterType="list">
  <choose>
    <when test="list != null and list.size != 0">
    insert into sampledb.oauth_client_token
    <trim prefix="(" suffix=")" suffixOverrides=",">
      token_id,
      authentication_id,
      user_name,
      client_id,
    </trim>
     values 
    <foreach collection="list" index="index" item="item" separator=",">
      <trim prefix="(" suffix=")" suffixOverrides=",">
      #{item.tokenId,jdbcType=VARCHAR},
      #{item.authenticationId,jdbcType=VARCHAR},
      #{item.userName,jdbcType=VARCHAR},
      #{item.clientId,jdbcType=VARCHAR},
      </trim>
    </foreach>
    </when>
    <otherwise>
    SELECT 0
    </otherwise>
  </choose>
  </insert>
  <insert id="batchInsertWithBLOBs" parameterType="list">
  <choose>
    <when test="list != null and list.size != 0">
    insert into sampledb.oauth_client_token
    <trim prefix="(" suffix=")" suffixOverrides=",">
      token_id,
      authentication_id,
      user_name,
      client_id,
      token,
    </trim>
     values 
    <foreach collection="list" index="index" item="item" separator=",">
      <trim prefix="(" suffix=")" suffixOverrides=",">
      #{item.tokenId,jdbcType=VARCHAR},
      #{item.authenticationId,jdbcType=VARCHAR},
      #{item.userName,jdbcType=VARCHAR},
      #{item.clientId,jdbcType=VARCHAR},
      #{item.token,jdbcType=LONGVARBINARY},
      </trim>
    </foreach>
    </when>
    <otherwise>
    SELECT 0
    </otherwise>
  </choose>
  </insert>
  <update id="batchUpdate" parameterType="list">
  <choose>
    <when test="list != null and list.size != 0">
    <foreach collection="list" index="index" item="item" separator=";">
       update sampledb.oauth_client_token
      <set>
      <trim suffixOverrides=",">
        <if test="item.authenticationId != null">
        authentication_id = #{item.authenticationId,jdbcType=VARCHAR},
        </if>
        <if test="item.userName != null">
        user_name = #{item.userName,jdbcType=VARCHAR},
        </if>
        <if test="item.clientId != null">
        client_id = #{item.clientId,jdbcType=VARCHAR},
        </if>
      </trim>
      </set>
      <where>
      <trim suffixOverrides=",">
        token_id = #{item.tokenId,jdbcType=VARCHAR},
      </trim>
      </where>
    </foreach>
    </when>
    <otherwise>
    SELECT 0
    </otherwise>
  </choose>
  </update>
  <update id="batchUpdateWithBLOBs" parameterType="list">
  <choose>
    <when test="list != null and list.size != 0">
    <foreach collection="list" index="index" item="item" separator=";">
       update sampledb.oauth_client_token
      <set>
      <trim suffixOverrides=",">
        <if test="item.authenticationId != null">
        authentication_id = #{item.authenticationId,jdbcType=VARCHAR},
        </if>
        <if test="item.userName != null">
        user_name = #{item.userName,jdbcType=VARCHAR},
        </if>
        <if test="item.clientId != null">
        client_id = #{item.clientId,jdbcType=VARCHAR},
        </if>
        <if test="item.token != null">
        token = #{item.token,jdbcType=LONGVARBINARY},
        </if>
      </trim>
      </set>
      <where>
      <trim suffixOverrides=",">
        token_id = #{item.tokenId,jdbcType=VARCHAR},
      </trim>
      </where>
    </foreach>
    </when>
    <otherwise>
    SELECT 0
    </otherwise>
  </choose>
  </update>
  <sql id="Identifiers_Array_Conditions">
  <foreach collection="array" index="index" item="item" separator=" and ">
    <if test="item == 'tokenId'">
    token_id = #{record.tokenId,jdbcType=VARCHAR}
    </if>
    <if test="item == 'authenticationId'">
    authentication_id = #{record.authenticationId,jdbcType=VARCHAR}
    </if>
    <if test="item == 'userName'">
    user_name = #{record.userName,jdbcType=VARCHAR}
    </if>
    <if test="item == 'clientId'">
    client_id = #{record.clientId,jdbcType=VARCHAR}
    </if>
    <if test="item == 'token'">
    token = #{record.token,jdbcType=LONGVARBINARY}
    </if>
  </foreach>
  </sql>
  <update id="upsert" parameterType="map">
  insert into sampledb.oauth_client_token
  <trim prefix="(" suffix=")" suffixOverrides=",">
    token_id,
    authentication_id,
    user_name,
    client_id,
    token,
  </trim>
  values 
  <trim prefix="(" suffix=")" suffixOverrides=",">
    #{record.tokenId,jdbcType=VARCHAR},
    #{record.authenticationId,jdbcType=VARCHAR},
    #{record.userName,jdbcType=VARCHAR},
    #{record.clientId,jdbcType=VARCHAR},
    #{record.token,jdbcType=LONGVARBINARY},
  </trim>
  on duplicate key update 
  <trim suffixOverrides=",">
    token_id = #{record.tokenId,jdbcType=VARCHAR},
    authentication_id = #{record.authenticationId,jdbcType=VARCHAR},
    user_name = #{record.userName,jdbcType=VARCHAR},
    client_id = #{record.clientId,jdbcType=VARCHAR},
    token = #{record.token,jdbcType=LONGVARBINARY},
  </trim>
  </update>
  <update id="upsertSelective" parameterType="map">
  insert into sampledb.oauth_client_token
  <trim prefix="(" suffix=")" suffixOverrides=",">
    <if test="record.tokenId != null">
    token_id,
    </if>
    <if test="record.authenticationId != null">
    authentication_id,
    </if>
    <if test="record.userName != null">
    user_name,
    </if>
    <if test="record.clientId != null">
    client_id,
    </if>
    <if test="record.token != null">
    token,
    </if>
  </trim>
  values 
  <trim prefix="(" suffix=")" suffixOverrides=",">
    <if test="record.tokenId != null">
    #{record.tokenId,jdbcType=VARCHAR},
    </if>
    <if test="record.authenticationId != null">
    #{record.authenticationId,jdbcType=VARCHAR},
    </if>
    <if test="record.userName != null">
    #{record.userName,jdbcType=VARCHAR},
    </if>
    <if test="record.clientId != null">
    #{record.clientId,jdbcType=VARCHAR},
    </if>
    <if test="record.token != null">
    #{record.token,jdbcType=LONGVARBINARY},
    </if>
  </trim>
  on duplicate key update 
  <trim suffixOverrides=",">
    <if test="record.tokenId != null">
    token_id = #{record.tokenId,jdbcType=VARCHAR},
    </if>
    <if test="record.authenticationId != null">
    authentication_id = #{record.authenticationId,jdbcType=VARCHAR},
    </if>
    <if test="record.userName != null">
    user_name = #{record.userName,jdbcType=VARCHAR},
    </if>
    <if test="record.clientId != null">
    client_id = #{record.clientId,jdbcType=VARCHAR},
    </if>
    <if test="record.token != null">
    token = #{record.token,jdbcType=LONGVARBINARY},
    </if>
  </trim>
  </update>
  <select id="selectByUniqueKey" parameterType="org.github.spring.base.entity.OauthClientTokenEntity" resultMap="BaseResultMap">
  select
  <include refid="Base_Column_List" />
  from sampledb.oauth_client_token
  <where>
    <trim suffixOverrides=",">
    <if test="record.authenticationId != null">
      authentication_id = #{record.authenticationId,jdbcType=VARCHAR},
    </if>
    <if test="record.userName != null">
      user_name = #{record.userName,jdbcType=VARCHAR},
    </if>
    <if test="record.clientId != null">
      client_id = #{record.clientId,jdbcType=VARCHAR},
    </if>
    </trim>
  </where>
  </select>
  <select id="selectByUniqueKeyWithBLOBs" parameterType="org.github.spring.base.entity.OauthClientTokenEntity" resultMap="ResultMapWithBLOBs">
  select
  <include refid="Base_Column_List" />
  ,
  <include refid="Blob_Column_List" />
  from sampledb.oauth_client_token
  <where>
    <trim suffixOverrides=",">
    <if test="record.authenticationId != null">
      authentication_id = #{record.authenticationId,jdbcType=VARCHAR},
    </if>
    <if test="record.userName != null">
      user_name = #{record.userName,jdbcType=VARCHAR},
    </if>
    <if test="record.clientId != null">
      client_id = #{record.clientId,jdbcType=VARCHAR},
    </if>
    </trim>
  </where>
  </select>
  <select id="selectByPrimaryKeyWithoutBLOBs" parameterType="org.github.spring.base.key.OauthClientTokenKey" resultMap="BaseResultMap">
  select
  <include refid="Base_Column_List" />
  from sampledb.oauth_client_token
  <where>
    <trim suffixOverrides=",">
    token_id = #{key.tokenId,jdbcType=VARCHAR},
    </trim>
  </where>
  </select>
</mapper>