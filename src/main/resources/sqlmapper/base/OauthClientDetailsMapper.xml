<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.github.spring.base.mapper.OauthClientDetailsMapper">
  <resultMap id="BaseResultMap" type="org.github.spring.base.entity.OauthClientDetailsEntity">
  <id column="client_id" jdbcType="VARCHAR" property="clientId" />
  <result column="resource_ids" jdbcType="VARCHAR" property="resourceIds" />
  <result column="client_secret" jdbcType="VARCHAR" property="clientSecret" />
  <result column="scope" jdbcType="VARCHAR" property="scope" />
  <result column="authorized_grant_types" jdbcType="VARCHAR" property="authorizedGrantTypes" />
  <result column="web_server_redirect_uri" jdbcType="VARCHAR" property="webServerRedirectUri" />
  <result column="authorities" jdbcType="VARCHAR" property="authorities" />
  <result column="access_token_validity" jdbcType="INTEGER" property="accessTokenValidity" />
  <result column="refresh_token_validity" jdbcType="INTEGER" property="refreshTokenValidity" />
  <result column="additional_information" jdbcType="VARCHAR" property="additionalInformation" />
  <result column="autoapprove" jdbcType="VARCHAR" property="autoapprove" />
  </resultMap>
  <sql id="Example_Where_Clause">
  <where>
    <foreach collection="oredCriteria" item="criteria" separator="or">
    <if test="criteria.valid">
      <trim prefix="(" prefixOverrides="and" suffix=")">
      <foreach collection="criteria.criteria" item="criterion">
        <choose>
        <when test="criterion.noValue">
          and ${criterion.condition}
        </when>
        <when test="criterion.singleValue">
          and ${criterion.condition} #{criterion.value}
        </when>
        <when test="criterion.betweenValue">
          and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
        </when>
        <when test="criterion.listValue">
          and ${criterion.condition}
          <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
          #{listItem}
          </foreach>
        </when>
        </choose>
      </foreach>
      </trim>
    </if>
    </foreach>
  </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
  <where>
    <foreach collection="example.oredCriteria" item="criteria" separator="or">
    <if test="criteria.valid">
      <trim prefix="(" prefixOverrides="and" suffix=")">
      <foreach collection="criteria.criteria" item="criterion">
        <choose>
        <when test="criterion.noValue">
          and ${criterion.condition}
        </when>
        <when test="criterion.singleValue">
          and ${criterion.condition} #{criterion.value}
        </when>
        <when test="criterion.betweenValue">
          and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
        </when>
        <when test="criterion.listValue">
          and ${criterion.condition}
          <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
          #{listItem}
          </foreach>
        </when>
        </choose>
      </foreach>
      </trim>
    </if>
    </foreach>
  </where>
  </sql>
  <sql id="Base_Column_List">
  client_id, resource_ids, client_secret, `scope`, authorized_grant_types, web_server_redirect_uri, 
  authorities, access_token_validity, refresh_token_validity, additional_information, 
  autoapprove
  </sql>
  <select id="selectByExample" parameterType="org.github.spring.base.example.OauthClientDetailsExample" resultMap="BaseResultMap">
  select
  <if test="distinct">
    distinct
  </if>
  <include refid="Base_Column_List" />
  from sampledb.oauth_client_details
  <if test="_parameter != null">
    <include refid="Example_Where_Clause" />
  </if>
  <if test="orderByClause != null">
    order by ${orderByClause}
  </if>
  </select>
  <delete id="deleteByExample" parameterType="org.github.spring.base.example.OauthClientDetailsExample">
  delete from sampledb.oauth_client_details
  <if test="_parameter != null">
    <include refid="Example_Where_Clause" />
  </if>
  </delete>
  <insert id="insertSelective" parameterType="org.github.spring.base.entity.OauthClientDetailsEntity">
  insert into sampledb.oauth_client_details
  <trim prefix="(" suffix=")" suffixOverrides=",">
    <if test="clientId != null">
    client_id,
    </if>
    <if test="resourceIds != null">
    resource_ids,
    </if>
    <if test="clientSecret != null">
    client_secret,
    </if>
    <if test="scope != null">
    `scope`,
    </if>
    <if test="authorizedGrantTypes != null">
    authorized_grant_types,
    </if>
    <if test="webServerRedirectUri != null">
    web_server_redirect_uri,
    </if>
    <if test="authorities != null">
    authorities,
    </if>
    <if test="accessTokenValidity != null">
    access_token_validity,
    </if>
    <if test="refreshTokenValidity != null">
    refresh_token_validity,
    </if>
    <if test="additionalInformation != null">
    additional_information,
    </if>
    <if test="autoapprove != null">
    autoapprove,
    </if>
  </trim>
  <trim prefix="values (" suffix=")" suffixOverrides=",">
    <if test="clientId != null">
    #{clientId,jdbcType=VARCHAR},
    </if>
    <if test="resourceIds != null">
    #{resourceIds,jdbcType=VARCHAR},
    </if>
    <if test="clientSecret != null">
    #{clientSecret,jdbcType=VARCHAR},
    </if>
    <if test="scope != null">
    #{scope,jdbcType=VARCHAR},
    </if>
    <if test="authorizedGrantTypes != null">
    #{authorizedGrantTypes,jdbcType=VARCHAR},
    </if>
    <if test="webServerRedirectUri != null">
    #{webServerRedirectUri,jdbcType=VARCHAR},
    </if>
    <if test="authorities != null">
    #{authorities,jdbcType=VARCHAR},
    </if>
    <if test="accessTokenValidity != null">
    #{accessTokenValidity,jdbcType=INTEGER},
    </if>
    <if test="refreshTokenValidity != null">
    #{refreshTokenValidity,jdbcType=INTEGER},
    </if>
    <if test="additionalInformation != null">
    #{additionalInformation,jdbcType=VARCHAR},
    </if>
    <if test="autoapprove != null">
    #{autoapprove,jdbcType=VARCHAR},
    </if>
  </trim>
  </insert>
  <select id="countByExample" parameterType="org.github.spring.base.example.OauthClientDetailsExample" resultType="java.lang.Long">
  select count(*) from sampledb.oauth_client_details
  <if test="_parameter != null">
    <include refid="Example_Where_Clause" />
  </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
  update sampledb.oauth_client_details
  <set>
    <if test="record.clientId != null">
    client_id = #{record.clientId,jdbcType=VARCHAR},
    </if>
    <if test="record.resourceIds != null">
    resource_ids = #{record.resourceIds,jdbcType=VARCHAR},
    </if>
    <if test="record.clientSecret != null">
    client_secret = #{record.clientSecret,jdbcType=VARCHAR},
    </if>
    <if test="record.scope != null">
    `scope` = #{record.scope,jdbcType=VARCHAR},
    </if>
    <if test="record.authorizedGrantTypes != null">
    authorized_grant_types = #{record.authorizedGrantTypes,jdbcType=VARCHAR},
    </if>
    <if test="record.webServerRedirectUri != null">
    web_server_redirect_uri = #{record.webServerRedirectUri,jdbcType=VARCHAR},
    </if>
    <if test="record.authorities != null">
    authorities = #{record.authorities,jdbcType=VARCHAR},
    </if>
    <if test="record.accessTokenValidity != null">
    access_token_validity = #{record.accessTokenValidity,jdbcType=INTEGER},
    </if>
    <if test="record.refreshTokenValidity != null">
    refresh_token_validity = #{record.refreshTokenValidity,jdbcType=INTEGER},
    </if>
    <if test="record.additionalInformation != null">
    additional_information = #{record.additionalInformation,jdbcType=VARCHAR},
    </if>
    <if test="record.autoapprove != null">
    autoapprove = #{record.autoapprove,jdbcType=VARCHAR},
    </if>
  </set>
  <if test="_parameter != null">
    <include refid="Update_By_Example_Where_Clause" />
  </if>
  </update>
  <update id="updateByExample" parameterType="map">
  update sampledb.oauth_client_details
  set client_id = #{record.clientId,jdbcType=VARCHAR},
    resource_ids = #{record.resourceIds,jdbcType=VARCHAR},
    client_secret = #{record.clientSecret,jdbcType=VARCHAR},
    `scope` = #{record.scope,jdbcType=VARCHAR},
    authorized_grant_types = #{record.authorizedGrantTypes,jdbcType=VARCHAR},
    web_server_redirect_uri = #{record.webServerRedirectUri,jdbcType=VARCHAR},
    authorities = #{record.authorities,jdbcType=VARCHAR},
    access_token_validity = #{record.accessTokenValidity,jdbcType=INTEGER},
    refresh_token_validity = #{record.refreshTokenValidity,jdbcType=INTEGER},
    additional_information = #{record.additionalInformation,jdbcType=VARCHAR},
    autoapprove = #{record.autoapprove,jdbcType=VARCHAR}
  <if test="_parameter != null">
    <include refid="Update_By_Example_Where_Clause" />
  </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="org.github.spring.base.entity.OauthClientDetailsEntity">
  update sampledb.oauth_client_details
  <set>
    <if test="resourceIds != null">
    resource_ids = #{resourceIds,jdbcType=VARCHAR},
    </if>
    <if test="clientSecret != null">
    client_secret = #{clientSecret,jdbcType=VARCHAR},
    </if>
    <if test="scope != null">
    `scope` = #{scope,jdbcType=VARCHAR},
    </if>
    <if test="authorizedGrantTypes != null">
    authorized_grant_types = #{authorizedGrantTypes,jdbcType=VARCHAR},
    </if>
    <if test="webServerRedirectUri != null">
    web_server_redirect_uri = #{webServerRedirectUri,jdbcType=VARCHAR},
    </if>
    <if test="authorities != null">
    authorities = #{authorities,jdbcType=VARCHAR},
    </if>
    <if test="accessTokenValidity != null">
    access_token_validity = #{accessTokenValidity,jdbcType=INTEGER},
    </if>
    <if test="refreshTokenValidity != null">
    refresh_token_validity = #{refreshTokenValidity,jdbcType=INTEGER},
    </if>
    <if test="additionalInformation != null">
    additional_information = #{additionalInformation,jdbcType=VARCHAR},
    </if>
    <if test="autoapprove != null">
    autoapprove = #{autoapprove,jdbcType=VARCHAR},
    </if>
  </set>
  where client_id = #{clientId,jdbcType=VARCHAR}
  </update>
  <insert id="batchInsert" parameterType="list">
  <choose>
    <when test="list != null and list.size != 0">
    insert into sampledb.oauth_client_details
    <trim prefix="(" suffix=")" suffixOverrides=",">
      client_id,
      resource_ids,
      client_secret,
      `scope`,
      authorized_grant_types,
      web_server_redirect_uri,
      authorities,
      access_token_validity,
      refresh_token_validity,
      additional_information,
      autoapprove,
    </trim>
     values 
    <foreach collection="list" index="index" item="item" separator=",">
      <trim prefix="(" suffix=")" suffixOverrides=",">
      #{item.clientId,jdbcType=VARCHAR},
      #{item.resourceIds,jdbcType=VARCHAR},
      #{item.clientSecret,jdbcType=VARCHAR},
      #{item.scope,jdbcType=VARCHAR},
      #{item.authorizedGrantTypes,jdbcType=VARCHAR},
      #{item.webServerRedirectUri,jdbcType=VARCHAR},
      #{item.authorities,jdbcType=VARCHAR},
      #{item.accessTokenValidity,jdbcType=INTEGER},
      #{item.refreshTokenValidity,jdbcType=INTEGER},
      #{item.additionalInformation,jdbcType=VARCHAR},
      #{item.autoapprove,jdbcType=VARCHAR},
      </trim>
    </foreach>
    </when>
    <otherwise>
    SELECT 0
    </otherwise>
  </choose>
  </insert>
  <update id="batchUpdate" parameterType="list">
  <choose>
    <when test="list != null and list.size != 0">
    <foreach collection="list" index="index" item="item" separator=";">
       update sampledb.oauth_client_details
      <set>
      <trim suffixOverrides=",">
        <if test="item.resourceIds != null">
        resource_ids = #{item.resourceIds,jdbcType=VARCHAR},
        </if>
        <if test="item.clientSecret != null">
        client_secret = #{item.clientSecret,jdbcType=VARCHAR},
        </if>
        <if test="item.scope != null">
        `scope` = #{item.scope,jdbcType=VARCHAR},
        </if>
        <if test="item.authorizedGrantTypes != null">
        authorized_grant_types = #{item.authorizedGrantTypes,jdbcType=VARCHAR},
        </if>
        <if test="item.webServerRedirectUri != null">
        web_server_redirect_uri = #{item.webServerRedirectUri,jdbcType=VARCHAR},
        </if>
        <if test="item.authorities != null">
        authorities = #{item.authorities,jdbcType=VARCHAR},
        </if>
        <if test="item.accessTokenValidity != null">
        access_token_validity = #{item.accessTokenValidity,jdbcType=INTEGER},
        </if>
        <if test="item.refreshTokenValidity != null">
        refresh_token_validity = #{item.refreshTokenValidity,jdbcType=INTEGER},
        </if>
        <if test="item.additionalInformation != null">
        additional_information = #{item.additionalInformation,jdbcType=VARCHAR},
        </if>
        <if test="item.autoapprove != null">
        autoapprove = #{item.autoapprove,jdbcType=VARCHAR},
        </if>
      </trim>
      </set>
      <where>
      <trim suffixOverrides=",">
        client_id = #{item.clientId,jdbcType=VARCHAR},
      </trim>
      </where>
    </foreach>
    </when>
    <otherwise>
    SELECT 0
    </otherwise>
  </choose>
  </update>
  <sql id="Identifiers_Array_Conditions">
  <foreach collection="array" index="index" item="item" separator=" and ">
    <if test="item == 'clientId'">
    client_id = #{record.clientId,jdbcType=VARCHAR}
    </if>
    <if test="item == 'resourceIds'">
    resource_ids = #{record.resourceIds,jdbcType=VARCHAR}
    </if>
    <if test="item == 'clientSecret'">
    client_secret = #{record.clientSecret,jdbcType=VARCHAR}
    </if>
    <if test="item == 'scope'">
    `scope` = #{record.scope,jdbcType=VARCHAR}
    </if>
    <if test="item == 'authorizedGrantTypes'">
    authorized_grant_types = #{record.authorizedGrantTypes,jdbcType=VARCHAR}
    </if>
    <if test="item == 'webServerRedirectUri'">
    web_server_redirect_uri = #{record.webServerRedirectUri,jdbcType=VARCHAR}
    </if>
    <if test="item == 'authorities'">
    authorities = #{record.authorities,jdbcType=VARCHAR}
    </if>
    <if test="item == 'accessTokenValidity'">
    access_token_validity = #{record.accessTokenValidity,jdbcType=INTEGER}
    </if>
    <if test="item == 'refreshTokenValidity'">
    refresh_token_validity = #{record.refreshTokenValidity,jdbcType=INTEGER}
    </if>
    <if test="item == 'additionalInformation'">
    additional_information = #{record.additionalInformation,jdbcType=VARCHAR}
    </if>
    <if test="item == 'autoapprove'">
    autoapprove = #{record.autoapprove,jdbcType=VARCHAR}
    </if>
  </foreach>
  </sql>
  <update id="upsert" parameterType="map">
  insert into sampledb.oauth_client_details
  <trim prefix="(" suffix=")" suffixOverrides=",">
    client_id,
    resource_ids,
    client_secret,
    `scope`,
    authorized_grant_types,
    web_server_redirect_uri,
    authorities,
    access_token_validity,
    refresh_token_validity,
    additional_information,
    autoapprove,
  </trim>
  values 
  <trim prefix="(" suffix=")" suffixOverrides=",">
    #{record.clientId,jdbcType=VARCHAR},
    #{record.resourceIds,jdbcType=VARCHAR},
    #{record.clientSecret,jdbcType=VARCHAR},
    #{record.scope,jdbcType=VARCHAR},
    #{record.authorizedGrantTypes,jdbcType=VARCHAR},
    #{record.webServerRedirectUri,jdbcType=VARCHAR},
    #{record.authorities,jdbcType=VARCHAR},
    #{record.accessTokenValidity,jdbcType=INTEGER},
    #{record.refreshTokenValidity,jdbcType=INTEGER},
    #{record.additionalInformation,jdbcType=VARCHAR},
    #{record.autoapprove,jdbcType=VARCHAR},
  </trim>
  on duplicate key update 
  <trim suffixOverrides=",">
    client_id = #{record.clientId,jdbcType=VARCHAR},
    resource_ids = #{record.resourceIds,jdbcType=VARCHAR},
    client_secret = #{record.clientSecret,jdbcType=VARCHAR},
    `scope` = #{record.scope,jdbcType=VARCHAR},
    authorized_grant_types = #{record.authorizedGrantTypes,jdbcType=VARCHAR},
    web_server_redirect_uri = #{record.webServerRedirectUri,jdbcType=VARCHAR},
    authorities = #{record.authorities,jdbcType=VARCHAR},
    access_token_validity = #{record.accessTokenValidity,jdbcType=INTEGER},
    refresh_token_validity = #{record.refreshTokenValidity,jdbcType=INTEGER},
    additional_information = #{record.additionalInformation,jdbcType=VARCHAR},
    autoapprove = #{record.autoapprove,jdbcType=VARCHAR},
  </trim>
  </update>
  <update id="upsertSelective" parameterType="map">
  insert into sampledb.oauth_client_details
  <trim prefix="(" suffix=")" suffixOverrides=",">
    <if test="record.clientId != null">
    client_id,
    </if>
    <if test="record.resourceIds != null">
    resource_ids,
    </if>
    <if test="record.clientSecret != null">
    client_secret,
    </if>
    <if test="record.scope != null">
    `scope`,
    </if>
    <if test="record.authorizedGrantTypes != null">
    authorized_grant_types,
    </if>
    <if test="record.webServerRedirectUri != null">
    web_server_redirect_uri,
    </if>
    <if test="record.authorities != null">
    authorities,
    </if>
    <if test="record.accessTokenValidity != null">
    access_token_validity,
    </if>
    <if test="record.refreshTokenValidity != null">
    refresh_token_validity,
    </if>
    <if test="record.additionalInformation != null">
    additional_information,
    </if>
    <if test="record.autoapprove != null">
    autoapprove,
    </if>
  </trim>
  values 
  <trim prefix="(" suffix=")" suffixOverrides=",">
    <if test="record.clientId != null">
    #{record.clientId,jdbcType=VARCHAR},
    </if>
    <if test="record.resourceIds != null">
    #{record.resourceIds,jdbcType=VARCHAR},
    </if>
    <if test="record.clientSecret != null">
    #{record.clientSecret,jdbcType=VARCHAR},
    </if>
    <if test="record.scope != null">
    #{record.scope,jdbcType=VARCHAR},
    </if>
    <if test="record.authorizedGrantTypes != null">
    #{record.authorizedGrantTypes,jdbcType=VARCHAR},
    </if>
    <if test="record.webServerRedirectUri != null">
    #{record.webServerRedirectUri,jdbcType=VARCHAR},
    </if>
    <if test="record.authorities != null">
    #{record.authorities,jdbcType=VARCHAR},
    </if>
    <if test="record.accessTokenValidity != null">
    #{record.accessTokenValidity,jdbcType=INTEGER},
    </if>
    <if test="record.refreshTokenValidity != null">
    #{record.refreshTokenValidity,jdbcType=INTEGER},
    </if>
    <if test="record.additionalInformation != null">
    #{record.additionalInformation,jdbcType=VARCHAR},
    </if>
    <if test="record.autoapprove != null">
    #{record.autoapprove,jdbcType=VARCHAR},
    </if>
  </trim>
  on duplicate key update 
  <trim suffixOverrides=",">
    <if test="record.clientId != null">
    client_id = #{record.clientId,jdbcType=VARCHAR},
    </if>
    <if test="record.resourceIds != null">
    resource_ids = #{record.resourceIds,jdbcType=VARCHAR},
    </if>
    <if test="record.clientSecret != null">
    client_secret = #{record.clientSecret,jdbcType=VARCHAR},
    </if>
    <if test="record.scope != null">
    `scope` = #{record.scope,jdbcType=VARCHAR},
    </if>
    <if test="record.authorizedGrantTypes != null">
    authorized_grant_types = #{record.authorizedGrantTypes,jdbcType=VARCHAR},
    </if>
    <if test="record.webServerRedirectUri != null">
    web_server_redirect_uri = #{record.webServerRedirectUri,jdbcType=VARCHAR},
    </if>
    <if test="record.authorities != null">
    authorities = #{record.authorities,jdbcType=VARCHAR},
    </if>
    <if test="record.accessTokenValidity != null">
    access_token_validity = #{record.accessTokenValidity,jdbcType=INTEGER},
    </if>
    <if test="record.refreshTokenValidity != null">
    refresh_token_validity = #{record.refreshTokenValidity,jdbcType=INTEGER},
    </if>
    <if test="record.additionalInformation != null">
    additional_information = #{record.additionalInformation,jdbcType=VARCHAR},
    </if>
    <if test="record.autoapprove != null">
    autoapprove = #{record.autoapprove,jdbcType=VARCHAR},
    </if>
  </trim>
  </update>
  <select id="selectByUniqueKey" parameterType="org.github.spring.base.entity.OauthClientDetailsEntity" resultMap="BaseResultMap">
  select
  <include refid="Base_Column_List" />
  from sampledb.oauth_client_details
  <where>
    <trim suffixOverrides=",">
    <if test="record.resourceIds != null">
      resource_ids = #{record.resourceIds,jdbcType=VARCHAR},
    </if>
    <if test="record.clientSecret != null">
      client_secret = #{record.clientSecret,jdbcType=VARCHAR},
    </if>
    <if test="record.scope != null">
      `scope` = #{record.scope,jdbcType=VARCHAR},
    </if>
    <if test="record.authorizedGrantTypes != null">
      authorized_grant_types = #{record.authorizedGrantTypes,jdbcType=VARCHAR},
    </if>
    <if test="record.webServerRedirectUri != null">
      web_server_redirect_uri = #{record.webServerRedirectUri,jdbcType=VARCHAR},
    </if>
    <if test="record.authorities != null">
      authorities = #{record.authorities,jdbcType=VARCHAR},
    </if>
    <if test="record.accessTokenValidity != null">
      access_token_validity = #{record.accessTokenValidity,jdbcType=INTEGER},
    </if>
    <if test="record.refreshTokenValidity != null">
      refresh_token_validity = #{record.refreshTokenValidity,jdbcType=INTEGER},
    </if>
    <if test="record.additionalInformation != null">
      additional_information = #{record.additionalInformation,jdbcType=VARCHAR},
    </if>
    <if test="record.autoapprove != null">
      autoapprove = #{record.autoapprove,jdbcType=VARCHAR},
    </if>
    </trim>
  </where>
  </select>
</mapper>